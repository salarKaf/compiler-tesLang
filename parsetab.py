
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQEQNEQleftLESS_THANGREATER_THANLTEQGTEQleftPLUSMINUSleftMULTIPLYDIVIDErightUMINUSNOTAND AS BEGIN BOOL COLON COMMA DBL_COLON DIVIDE DO ELSE END EQ EQEQ FALSE FOR FUNK GREATER_THAN GTEQ ID IF INT LCURLYEBR LEN LESS_THAN LPAREN LSQUAREBR LTEQ MINUS MSTR MSTRING MULTIPLY NEQ NOT NULL NUMBER OR PLUS PRINT QMARK RCURLYEBR RETURN RPAREN RSQUAREBR SEMI_COLON STR STRING TO TRUE VECTOR WHILEprogram : function_listfunction_list : function_list function\n                    | functionfunction : FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBRfunction : FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBRparam_list : param_list COMMA parameter\n                 | parameterparameter : ID AS typetype : INT\n           | STR  \n           | MSTR\n           | BOOL\n           | VECTOR\n           | NULLstmt_list : stmt_list statement\n                | statementstatement : var_declaration\n                | assignment\n                | function_call_stmt\n                | return_stmt\n                | if_stmt\n                | for_stmt\n                | while_stmtvar_declaration : ID DBL_COLON type SEMI_COLONassignment : ID EQ expression SEMI_COLON\n                 | array_access EQ expression SEMI_COLONarray_access : ID LSQUAREBR expression RSQUAREBRfunction_call_stmt : function_call SEMI_COLONfunction_call : ID LPAREN arg_list RPAREN\n                    | ID LPAREN RPAREN\n                    | PRINT LPAREN arg_list RPAREN\n                    | PRINT LPAREN RPARENarg_list : arg_list COMMA expression\n               | expressionreturn_stmt : RETURN expression SEMI_COLON\n                  | RETURN SEMI_COLONif_stmt : IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR BEGIN stmt_list END\n              | IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR BEGIN stmt_list END ELSE BEGIN stmt_list ENDfor_stmt : FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list ENDwhile_stmt : WHILE LPAREN expression RPAREN BEGIN stmt_list END\n                 | WHILE LPAREN expression RPAREN DO BEGIN stmt_list ENDexpression : expression PLUS expression\n                 | expression MINUS expression\n                 | expression MULTIPLY expression\n                 | expression DIVIDE expression\n                 | expression EQEQ expression\n                 | expression NEQ expression\n                 | expression LESS_THAN expression\n                 | expression GREATER_THAN expression\n                 | expression LTEQ expression\n                 | expression GTEQ expression\n                 | expression AND expression\n                 | expression OR expressionexpression : NOT expression\n                 | MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRING\n                 | MSTRINGexpression : TRUE\n                 | FALSEexpression : IDexpression : array_accessexpression : function_callexpression : ID LPAREN expression RPARENexpression : LEN LPAREN expression RPARENexpression : expression QMARK expression COLON expression'
    
_lr_action_items = {'FUNK':([0,2,3,5,53,75,],[4,4,-3,-2,-5,-4,]),'$end':([1,2,3,5,53,75,],[0,-1,-3,-2,-5,-4,]),'ID':([4,7,14,29,30,32,33,34,35,36,37,38,39,40,43,48,50,51,52,54,55,56,58,59,60,61,72,73,74,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,107,108,111,112,130,134,139,143,144,145,146,148,149,150,152,153,154,156,157,158,159,160,],[6,8,8,31,31,31,-16,-17,-18,-19,-20,-21,-22,-23,67,31,67,67,67,-15,67,-28,-36,67,67,67,103,67,67,-35,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-24,-25,67,-26,67,67,31,67,31,31,31,-40,31,31,-41,-37,31,31,31,-39,31,-38,]),'LPAREN':([6,31,43,45,46,47,50,51,52,55,59,60,61,67,70,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,111,130,134,143,],[7,52,61,72,73,74,61,61,61,61,61,61,61,100,101,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'RPAREN':([7,9,11,16,17,18,19,20,21,22,24,52,62,63,64,65,66,67,68,69,74,79,80,81,97,98,99,100,104,105,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,132,133,135,136,141,147,],[10,13,-7,-8,-9,-10,-11,-12,-13,-14,-6,80,-57,-58,-59,-60,-61,-62,-63,-64,106,110,-30,-34,-55,-54,126,80,131,132,-32,-27,-29,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-56,135,136,-31,-33,-65,-66,-67,151,]),'AS':([8,],[12,]),'COMMA':([9,11,16,17,18,19,20,21,22,24,62,63,64,65,66,67,68,69,79,80,81,97,98,105,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,126,127,132,133,135,136,141,],[14,-7,-8,-9,-10,-11,-12,-13,-14,-6,-57,-58,-59,-60,-61,-62,-63,-64,111,-30,-34,-55,-54,111,-32,-27,-29,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-56,-34,-31,-33,-65,-66,-67,]),'LESS_THAN':([10,13,57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,135,136,138,141,147,],[15,23,90,-57,-58,-59,-60,-61,-62,-63,-64,90,90,-30,90,90,-55,-54,90,90,-32,-27,-29,-42,-43,-44,-45,90,90,-48,-49,-50,-51,90,90,90,-56,90,90,90,-31,90,-65,-66,90,90,90,]),'INT':([12,15,23,49,],[17,17,17,17,]),'STR':([12,15,23,49,],[18,18,18,18,]),'MSTR':([12,15,23,49,],[19,19,19,19,]),'BOOL':([12,15,23,49,],[20,20,20,20,]),'VECTOR':([12,15,23,49,],[21,21,21,21,]),'NULL':([12,15,23,49,],[22,22,22,22,]),'GREATER_THAN':([17,18,19,20,21,22,25,26,57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,135,136,138,141,147,],[-9,-10,-11,-12,-13,-14,27,28,91,-57,-58,-59,-60,-61,-62,-63,-64,91,91,-30,91,91,-55,-54,91,91,-32,-27,-29,-42,-43,-44,-45,91,91,-48,-49,-50,-51,91,91,91,-56,91,91,91,-31,91,-65,-66,91,91,91,]),'SEMI_COLON':([17,18,19,20,21,22,42,43,57,62,63,64,65,66,67,68,69,76,77,80,82,97,98,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,126,132,135,136,141,],[-9,-10,-11,-12,-13,-14,56,58,83,-57,-58,-59,-60,-61,-62,-63,-64,107,108,-30,112,-55,-54,-32,-27,-29,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-56,-31,-65,-66,-67,]),'LCURLYEBR':([27,28,],[29,30,]),'RETURN':([29,30,32,33,34,35,36,37,38,39,40,48,54,56,58,83,107,108,112,139,144,145,146,148,149,150,152,153,154,156,157,158,159,160,],[43,43,43,-16,-17,-18,-19,-20,-21,-22,-23,43,-15,-28,-36,-35,-24,-25,-26,43,43,43,43,-40,43,43,-41,-37,43,43,43,-39,43,-38,]),'IF':([29,30,32,33,34,35,36,37,38,39,40,48,54,56,58,83,107,108,112,139,144,145,146,148,149,150,152,153,154,156,157,158,159,160,],[44,44,44,-16,-17,-18,-19,-20,-21,-22,-23,44,-15,-28,-36,-35,-24,-25,-26,44,44,44,44,-40,44,44,-41,-37,44,44,44,-39,44,-38,]),'FOR':([29,30,32,33,34,35,36,37,38,39,40,48,54,56,58,83,107,108,112,139,144,145,146,148,149,150,152,153,154,156,157,158,159,160,],[45,45,45,-16,-17,-18,-19,-20,-21,-22,-23,45,-15,-28,-36,-35,-24,-25,-26,45,45,45,45,-40,45,45,-41,-37,45,45,45,-39,45,-38,]),'WHILE':([29,30,32,33,34,35,36,37,38,39,40,48,54,56,58,83,107,108,112,139,144,145,146,148,149,150,152,153,154,156,157,158,159,160,],[46,46,46,-16,-17,-18,-19,-20,-21,-22,-23,46,-15,-28,-36,-35,-24,-25,-26,46,46,46,46,-40,46,46,-41,-37,46,46,46,-39,46,-38,]),'PRINT':([29,30,32,33,34,35,36,37,38,39,40,43,48,50,51,52,54,55,56,58,59,60,61,73,74,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,107,108,111,112,130,134,139,143,144,145,146,148,149,150,152,153,154,156,157,158,159,160,],[47,47,47,-16,-17,-18,-19,-20,-21,-22,-23,47,47,47,47,47,-15,47,-28,-36,47,47,47,47,47,-35,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-24,-25,47,-26,47,47,47,47,47,47,47,-40,47,47,-41,-37,47,47,47,-39,47,-38,]),'DBL_COLON':([31,],[49,]),'EQ':([31,41,103,109,],[50,55,130,-27,]),'LSQUAREBR':([31,44,67,71,],[51,71,51,102,]),'RCURLYEBR':([32,33,34,35,36,37,38,39,40,48,54,56,58,83,107,108,112,148,152,153,158,160,],[53,-16,-17,-18,-19,-20,-21,-22,-23,75,-15,-28,-36,-35,-24,-25,-26,-40,-41,-37,-39,-38,]),'END':([33,34,35,36,37,38,39,40,54,56,58,83,107,108,112,144,148,149,150,152,153,156,158,159,160,],[-16,-17,-18,-19,-20,-21,-22,-23,-15,-28,-36,-35,-24,-25,-26,148,-40,152,153,-41,-37,158,-39,160,-38,]),'NOT':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,111,130,134,143,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'MINUS':([43,50,51,52,55,57,59,60,61,62,63,64,65,66,67,68,69,73,74,77,78,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,134,135,136,138,141,143,147,],[59,59,59,59,59,85,59,59,59,-57,-58,-59,-60,-61,-62,-63,-64,59,59,85,85,-30,85,85,59,59,59,59,59,59,59,59,59,59,59,59,59,-55,-54,85,59,59,59,85,-32,-27,-29,59,-42,-43,-44,-45,85,85,85,85,85,85,85,85,85,-56,85,85,85,59,-31,85,59,-65,-66,85,85,59,85,]),'NUMBER':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,111,130,134,143,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'STRING':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,111,130,134,143,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'MSTRING':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,111,130,134,143,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'TRUE':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,111,130,134,143,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'FALSE':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,111,130,134,143,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'LEN':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,111,130,134,143,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'PLUS':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,135,136,138,141,147,],[84,-57,-58,-59,-60,-61,-62,-63,-64,84,84,-30,84,84,-55,-54,84,84,-32,-27,-29,-42,-43,-44,-45,84,84,84,84,84,84,84,84,84,-56,84,84,84,-31,84,-65,-66,84,84,84,]),'MULTIPLY':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,135,136,138,141,147,],[86,-57,-58,-59,-60,-61,-62,-63,-64,86,86,-30,86,86,-55,-54,86,86,-32,-27,-29,86,86,-44,-45,86,86,86,86,86,86,86,86,86,-56,86,86,86,-31,86,-65,-66,86,86,86,]),'DIVIDE':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,135,136,138,141,147,],[87,-57,-58,-59,-60,-61,-62,-63,-64,87,87,-30,87,87,-55,-54,87,87,-32,-27,-29,87,87,-44,-45,87,87,87,87,87,87,87,87,87,-56,87,87,87,-31,87,-65,-66,87,87,87,]),'EQEQ':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,135,136,138,141,147,],[88,-57,-58,-59,-60,-61,-62,-63,-64,88,88,-30,88,88,-55,-54,88,88,-32,-27,-29,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,88,88,88,-56,88,88,88,-31,88,-65,-66,88,88,88,]),'NEQ':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,135,136,138,141,147,],[89,-57,-58,-59,-60,-61,-62,-63,-64,89,89,-30,89,89,-55,-54,89,89,-32,-27,-29,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,89,89,89,-56,89,89,89,-31,89,-65,-66,89,89,89,]),'LTEQ':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,135,136,138,141,147,],[92,-57,-58,-59,-60,-61,-62,-63,-64,92,92,-30,92,92,-55,-54,92,92,-32,-27,-29,-42,-43,-44,-45,92,92,-48,-49,-50,-51,92,92,92,-56,92,92,92,-31,92,-65,-66,92,92,92,]),'GTEQ':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,135,136,138,141,147,],[93,-57,-58,-59,-60,-61,-62,-63,-64,93,93,-30,93,93,-55,-54,93,93,-32,-27,-29,-42,-43,-44,-45,93,93,-48,-49,-50,-51,93,93,93,-56,93,93,93,-31,93,-65,-66,93,93,93,]),'AND':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,135,136,138,141,147,],[94,-57,-58,-59,-60,-61,-62,-63,-64,94,94,-30,94,94,-55,-54,94,94,-32,-27,-29,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,94,94,-56,94,94,94,-31,94,-65,-66,94,94,94,]),'OR':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,135,136,138,141,147,],[95,-57,-58,-59,-60,-61,-62,-63,-64,95,95,-30,95,95,-55,-54,95,95,-32,-27,-29,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,95,-56,95,95,95,-31,95,-65,-66,95,95,95,]),'QMARK':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,135,136,138,141,147,],[96,-57,-58,-59,-60,-61,-62,-63,-64,96,96,-30,96,96,-55,-54,96,96,-32,-27,-29,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,96,-56,96,96,96,-31,96,-65,-66,96,96,96,]),'RSQUAREBR':([62,63,64,65,66,67,68,69,78,80,97,98,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,126,129,132,135,136,137,141,],[-57,-58,-59,-60,-61,-62,-63,-64,109,-30,-55,-54,-32,-27,-29,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-56,137,-31,-65,-66,142,-67,]),'COLON':([62,63,64,65,66,67,68,69,80,97,98,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,135,136,141,],[-57,-58,-59,-60,-61,-62,-63,-64,-30,-55,-54,-32,-27,-29,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,134,-56,-31,-65,-66,-67,]),'TO':([62,63,64,65,66,67,68,69,80,97,98,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,126,132,135,136,138,141,],[-57,-58,-59,-60,-61,-62,-63,-64,-30,-55,-54,-32,-27,-29,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-56,-31,-65,-66,143,-67,]),'BEGIN':([131,140,142,151,155,],[139,145,146,154,157,]),'DO':([131,],[140,]),'ELSE':([153,],[155,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function_list':([0,],[2,]),'function':([0,2,],[3,5,]),'param_list':([7,],[9,]),'parameter':([7,14,],[11,24,]),'type':([12,15,23,49,],[16,25,26,76,]),'stmt_list':([29,30,139,145,146,154,157,],[32,48,144,149,150,156,159,]),'statement':([29,30,32,48,139,144,145,146,149,150,154,156,157,159,],[33,33,54,54,33,54,33,33,54,54,33,54,33,54,]),'var_declaration':([29,30,32,48,139,144,145,146,149,150,154,156,157,159,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'assignment':([29,30,32,48,139,144,145,146,149,150,154,156,157,159,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'function_call_stmt':([29,30,32,48,139,144,145,146,149,150,154,156,157,159,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'return_stmt':([29,30,32,48,139,144,145,146,149,150,154,156,157,159,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'if_stmt':([29,30,32,48,139,144,145,146,149,150,154,156,157,159,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'for_stmt':([29,30,32,48,139,144,145,146,149,150,154,156,157,159,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'while_stmt':([29,30,32,48,139,144,145,146,149,150,154,156,157,159,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'array_access':([29,30,32,43,48,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,111,130,134,139,143,144,145,146,149,150,154,156,157,159,],[41,41,41,68,41,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,41,68,41,41,41,41,41,41,41,41,41,]),'function_call':([29,30,32,43,48,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,111,130,134,139,143,144,145,146,149,150,154,156,157,159,],[42,42,42,69,42,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,42,69,42,42,42,42,42,42,42,42,42,]),'expression':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,111,130,134,143,],[57,77,78,81,82,97,98,99,104,81,113,114,115,116,117,118,119,120,121,122,123,124,125,127,128,129,133,138,141,147,]),'arg_list':([52,74,100,],[79,105,79,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function_list','program',1,'p_program','parser.py',171),
  ('function_list -> function_list function','function_list',2,'p_function_list','parser.py',175),
  ('function_list -> function','function_list',1,'p_function_list','parser.py',176),
  ('function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR','function',11,'p_function','parser.py',183),
  ('function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR','function',10,'p_function_no_params','parser.py',187),
  ('param_list -> param_list COMMA parameter','param_list',3,'p_param_list','parser.py',191),
  ('param_list -> parameter','param_list',1,'p_param_list','parser.py',192),
  ('parameter -> ID AS type','parameter',3,'p_parameter','parser.py',199),
  ('type -> INT','type',1,'p_type','parser.py',203),
  ('type -> STR','type',1,'p_type','parser.py',204),
  ('type -> MSTR','type',1,'p_type','parser.py',205),
  ('type -> BOOL','type',1,'p_type','parser.py',206),
  ('type -> VECTOR','type',1,'p_type','parser.py',207),
  ('type -> NULL','type',1,'p_type','parser.py',208),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',212),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',213),
  ('statement -> var_declaration','statement',1,'p_statement','parser.py',220),
  ('statement -> assignment','statement',1,'p_statement','parser.py',221),
  ('statement -> function_call_stmt','statement',1,'p_statement','parser.py',222),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',223),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',224),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',225),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',226),
  ('var_declaration -> ID DBL_COLON type SEMI_COLON','var_declaration',4,'p_var_declaration','parser.py',230),
  ('assignment -> ID EQ expression SEMI_COLON','assignment',4,'p_assignment','parser.py',234),
  ('assignment -> array_access EQ expression SEMI_COLON','assignment',4,'p_assignment','parser.py',235),
  ('array_access -> ID LSQUAREBR expression RSQUAREBR','array_access',4,'p_array_access','parser.py',239),
  ('function_call_stmt -> function_call SEMI_COLON','function_call_stmt',2,'p_function_call_stmt','parser.py',243),
  ('function_call -> ID LPAREN arg_list RPAREN','function_call',4,'p_function_call','parser.py',247),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','parser.py',248),
  ('function_call -> PRINT LPAREN arg_list RPAREN','function_call',4,'p_function_call','parser.py',249),
  ('function_call -> PRINT LPAREN RPAREN','function_call',3,'p_function_call','parser.py',250),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',257),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',258),
  ('return_stmt -> RETURN expression SEMI_COLON','return_stmt',3,'p_return_stmt','parser.py',265),
  ('return_stmt -> RETURN SEMI_COLON','return_stmt',2,'p_return_stmt','parser.py',266),
  ('if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR BEGIN stmt_list END','if_stmt',9,'p_if_stmt','parser.py',273),
  ('if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR BEGIN stmt_list END ELSE BEGIN stmt_list END','if_stmt',13,'p_if_stmt','parser.py',274),
  ('for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END','for_stmt',11,'p_for_stmt','parser.py',281),
  ('while_stmt -> WHILE LPAREN expression RPAREN BEGIN stmt_list END','while_stmt',7,'p_while_stmt','parser.py',285),
  ('while_stmt -> WHILE LPAREN expression RPAREN DO BEGIN stmt_list END','while_stmt',8,'p_while_stmt','parser.py',286),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',293),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',294),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',295),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',296),
  ('expression -> expression EQEQ expression','expression',3,'p_expression_binop','parser.py',297),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',298),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binop','parser.py',299),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binop','parser.py',300),
  ('expression -> expression LTEQ expression','expression',3,'p_expression_binop','parser.py',301),
  ('expression -> expression GTEQ expression','expression',3,'p_expression_binop','parser.py',302),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',303),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',304),
  ('expression -> NOT expression','expression',2,'p_expression_unary','parser.py',308),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','parser.py',309),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',313),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',317),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',321),
  ('expression -> MSTRING','expression',1,'p_expression_string','parser.py',322),
  ('expression -> TRUE','expression',1,'p_expression_boolean','parser.py',326),
  ('expression -> FALSE','expression',1,'p_expression_boolean','parser.py',327),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',331),
  ('expression -> array_access','expression',1,'p_expression_array_access','parser.py',335),
  ('expression -> function_call','expression',1,'p_expression_function_call','parser.py',339),
  ('expression -> ID LPAREN expression RPAREN','expression',4,'p_expression_list_call','parser.py',343),
  ('expression -> LEN LPAREN expression RPAREN','expression',4,'p_expression_length','parser.py',352),
  ('expression -> expression QMARK expression COLON expression','expression',5,'p_expression_ternary','parser.py',356),
]
