
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQEQNEQleftLESS_THANGREATER_THANLTEQGTEQleftPLUSMINUSleftMULTIPLYDIVIDErightUMINUSNOTAND AS BEGIN BOOL COLON COMMA DBL_COLON DIVIDE DO ELSE END EQ EQEQ FALSE FOR FUNK GREATER_THAN GTEQ ID IF INT LCURLYEBR LEN LESS_THAN LPAREN LSQUAREBR LTEQ MINUS MSTR MSTRING MULTIPLY NEQ NOT NULL NUMBER OR PLUS PRINT QMARK RCURLYEBR RETURN RPAREN RSQUAREBR SEMI_COLON STR STRING TO TRUE VECTOR WHILEprogram : function_listfunction_list : function_list function\n                    | functionfunction : FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBRfunction : FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBRparam_list : param_list COMMA parameter\n                 | parameterparameter : ID AS typetype : INT\n           | STR  \n           | MSTR\n           | BOOL\n           | VECTOR\n           | NULLstmt_list : stmt_list statement\n                 | statementstatement : var_declaration\n                 | assignment\n                 | function_call_stmt\n                 | return_stmt\n                 | if_stmt\n                 | for_stmt\n                 | while_stmtvar_declaration : ID DBL_COLON type SEMI_COLON\n                       | ID DBL_COLON type EQ expression SEMI_COLONassignment : ID EQ expression SEMI_COLON\n                 | array_access EQ expression SEMI_COLONarray_access : ID LSQUAREBR expression RSQUAREBRfunction_call_stmt : function_call SEMI_COLONfunction_call : ID LPAREN arg_list RPAREN\n                    | ID LPAREN RPAREN\n                    | PRINT LPAREN arg_list RPAREN\n                    | PRINT LPAREN RPARENarg_list : arg_list COMMA expression\n               | expressionreturn_stmt : RETURN expression SEMI_COLON\n                  | RETURN SEMI_COLONif_stmt : IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR BEGIN stmt_list END\n              | IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR BEGIN stmt_list END ELSE BEGIN stmt_list ENDfor_stmt : FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list ENDwhile_stmt : WHILE LPAREN expression RPAREN BEGIN stmt_list END\n                 | WHILE LPAREN expression RPAREN DO BEGIN stmt_list ENDexpression : expression PLUS expression\n                 | expression MINUS expression\n                 | expression MULTIPLY expression\n                 | expression DIVIDE expression\n                 | expression EQEQ expression\n                 | expression NEQ expression\n                 | expression LESS_THAN expression\n                 | expression GREATER_THAN expression\n                 | expression LTEQ expression\n                 | expression GTEQ expression\n                 | expression AND expression\n                 | expression OR expressionexpression : NOT expression\n                 | MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRING\n                 | MSTRINGexpression : TRUE\n                 | FALSEexpression : IDexpression : array_accessexpression : function_callexpression : ID LPAREN expression RPARENexpression : LEN LPAREN expression RPARENexpression : expression QMARK expression COLON expression'
    
_lr_action_items = {'FUNK':([0,2,3,5,53,75,],[4,4,-3,-2,-5,-4,]),'$end':([1,2,3,5,53,75,],[0,-1,-3,-2,-5,-4,]),'ID':([4,7,14,29,30,32,33,34,35,36,37,38,39,40,43,48,50,51,52,54,55,56,58,59,60,61,72,73,74,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,107,108,109,112,113,131,136,141,143,146,147,148,149,151,152,153,155,156,157,159,160,161,162,163,],[6,8,8,31,31,31,-16,-17,-18,-19,-20,-21,-22,-23,67,31,67,67,67,-15,67,-29,-37,67,67,67,103,67,67,-36,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-24,67,-26,67,-27,67,67,31,-25,67,31,31,31,-41,31,31,-42,-38,31,31,31,-40,31,-39,]),'LPAREN':([6,31,43,45,46,47,50,51,52,55,59,60,61,67,70,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,108,112,131,136,146,],[7,52,61,72,73,74,61,61,61,61,61,61,61,100,101,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'RPAREN':([7,9,11,16,17,18,19,20,21,22,24,52,62,63,64,65,66,67,68,69,74,79,80,81,97,98,99,100,104,105,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,127,128,129,133,135,137,138,144,150,],[10,13,-7,-8,-9,-10,-11,-12,-13,-14,-6,80,-58,-59,-60,-61,-62,-63,-64,-65,106,111,-31,-35,-56,-55,127,80,132,133,-33,-28,-30,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-57,137,138,-32,-34,-66,-67,-68,154,]),'AS':([8,],[12,]),'COMMA':([9,11,16,17,18,19,20,21,22,24,62,63,64,65,66,67,68,69,79,80,81,97,98,105,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,127,128,133,135,137,138,144,],[14,-7,-8,-9,-10,-11,-12,-13,-14,-6,-58,-59,-60,-61,-62,-63,-64,-65,112,-31,-35,-56,-55,112,-33,-28,-30,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-57,-35,-32,-34,-66,-67,-68,]),'LESS_THAN':([10,13,57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,137,138,140,144,150,],[15,23,90,-58,-59,-60,-61,-62,-63,-64,-65,90,90,-31,90,90,-56,-55,90,90,-33,-28,-30,-43,-44,-45,-46,90,90,-49,-50,-51,-52,90,90,90,-57,90,90,90,-32,90,90,-66,-67,90,90,90,]),'INT':([12,15,23,49,],[17,17,17,17,]),'STR':([12,15,23,49,],[18,18,18,18,]),'MSTR':([12,15,23,49,],[19,19,19,19,]),'BOOL':([12,15,23,49,],[20,20,20,20,]),'VECTOR':([12,15,23,49,],[21,21,21,21,]),'NULL':([12,15,23,49,],[22,22,22,22,]),'GREATER_THAN':([17,18,19,20,21,22,25,26,57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,137,138,140,144,150,],[-9,-10,-11,-12,-13,-14,27,28,91,-58,-59,-60,-61,-62,-63,-64,-65,91,91,-31,91,91,-56,-55,91,91,-33,-28,-30,-43,-44,-45,-46,91,91,-49,-50,-51,-52,91,91,91,-57,91,91,91,-32,91,91,-66,-67,91,91,91,]),'SEMI_COLON':([17,18,19,20,21,22,42,43,57,62,63,64,65,66,67,68,69,76,77,80,82,97,98,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,127,133,134,137,138,144,],[-9,-10,-11,-12,-13,-14,56,58,83,-58,-59,-60,-61,-62,-63,-64,-65,107,109,-31,113,-56,-55,-33,-28,-30,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-57,-32,143,-66,-67,-68,]),'EQ':([17,18,19,20,21,22,31,41,76,103,110,],[-9,-10,-11,-12,-13,-14,50,55,108,131,-28,]),'LCURLYEBR':([27,28,],[29,30,]),'RETURN':([29,30,32,33,34,35,36,37,38,39,40,48,54,56,58,83,107,109,113,141,143,147,148,149,151,152,153,155,156,157,159,160,161,162,163,],[43,43,43,-16,-17,-18,-19,-20,-21,-22,-23,43,-15,-29,-37,-36,-24,-26,-27,43,-25,43,43,43,-41,43,43,-42,-38,43,43,43,-40,43,-39,]),'IF':([29,30,32,33,34,35,36,37,38,39,40,48,54,56,58,83,107,109,113,141,143,147,148,149,151,152,153,155,156,157,159,160,161,162,163,],[44,44,44,-16,-17,-18,-19,-20,-21,-22,-23,44,-15,-29,-37,-36,-24,-26,-27,44,-25,44,44,44,-41,44,44,-42,-38,44,44,44,-40,44,-39,]),'FOR':([29,30,32,33,34,35,36,37,38,39,40,48,54,56,58,83,107,109,113,141,143,147,148,149,151,152,153,155,156,157,159,160,161,162,163,],[45,45,45,-16,-17,-18,-19,-20,-21,-22,-23,45,-15,-29,-37,-36,-24,-26,-27,45,-25,45,45,45,-41,45,45,-42,-38,45,45,45,-40,45,-39,]),'WHILE':([29,30,32,33,34,35,36,37,38,39,40,48,54,56,58,83,107,109,113,141,143,147,148,149,151,152,153,155,156,157,159,160,161,162,163,],[46,46,46,-16,-17,-18,-19,-20,-21,-22,-23,46,-15,-29,-37,-36,-24,-26,-27,46,-25,46,46,46,-41,46,46,-42,-38,46,46,46,-40,46,-39,]),'PRINT':([29,30,32,33,34,35,36,37,38,39,40,43,48,50,51,52,54,55,56,58,59,60,61,73,74,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,107,108,109,112,113,131,136,141,143,146,147,148,149,151,152,153,155,156,157,159,160,161,162,163,],[47,47,47,-16,-17,-18,-19,-20,-21,-22,-23,47,47,47,47,47,-15,47,-29,-37,47,47,47,47,47,-36,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-24,47,-26,47,-27,47,47,47,-25,47,47,47,47,-41,47,47,-42,-38,47,47,47,-40,47,-39,]),'DBL_COLON':([31,],[49,]),'LSQUAREBR':([31,44,67,71,],[51,71,51,102,]),'RCURLYEBR':([32,33,34,35,36,37,38,39,40,48,54,56,58,83,107,109,113,143,151,155,156,161,163,],[53,-16,-17,-18,-19,-20,-21,-22,-23,75,-15,-29,-37,-36,-24,-26,-27,-25,-41,-42,-38,-40,-39,]),'END':([33,34,35,36,37,38,39,40,54,56,58,83,107,109,113,143,147,151,152,153,155,156,159,161,162,163,],[-16,-17,-18,-19,-20,-21,-22,-23,-15,-29,-37,-36,-24,-26,-27,-25,151,-41,155,156,-42,-38,161,-40,163,-39,]),'NOT':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,108,112,131,136,146,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'MINUS':([43,50,51,52,55,57,59,60,61,62,63,64,65,66,67,68,69,73,74,77,78,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,108,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,135,136,137,138,140,144,146,150,],[59,59,59,59,59,85,59,59,59,-58,-59,-60,-61,-62,-63,-64,-65,59,59,85,85,-31,85,85,59,59,59,59,59,59,59,59,59,59,59,59,59,-56,-55,85,59,59,59,85,-33,59,-28,-30,59,-43,-44,-45,-46,85,85,85,85,85,85,85,85,85,-57,85,85,85,59,-32,85,85,59,-66,-67,85,85,59,85,]),'NUMBER':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,108,112,131,136,146,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'STRING':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,108,112,131,136,146,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'MSTRING':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,108,112,131,136,146,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'TRUE':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,108,112,131,136,146,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'FALSE':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,108,112,131,136,146,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'LEN':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,108,112,131,136,146,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'PLUS':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,137,138,140,144,150,],[84,-58,-59,-60,-61,-62,-63,-64,-65,84,84,-31,84,84,-56,-55,84,84,-33,-28,-30,-43,-44,-45,-46,84,84,84,84,84,84,84,84,84,-57,84,84,84,-32,84,84,-66,-67,84,84,84,]),'MULTIPLY':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,137,138,140,144,150,],[86,-58,-59,-60,-61,-62,-63,-64,-65,86,86,-31,86,86,-56,-55,86,86,-33,-28,-30,86,86,-45,-46,86,86,86,86,86,86,86,86,86,-57,86,86,86,-32,86,86,-66,-67,86,86,86,]),'DIVIDE':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,137,138,140,144,150,],[87,-58,-59,-60,-61,-62,-63,-64,-65,87,87,-31,87,87,-56,-55,87,87,-33,-28,-30,87,87,-45,-46,87,87,87,87,87,87,87,87,87,-57,87,87,87,-32,87,87,-66,-67,87,87,87,]),'EQEQ':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,137,138,140,144,150,],[88,-58,-59,-60,-61,-62,-63,-64,-65,88,88,-31,88,88,-56,-55,88,88,-33,-28,-30,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,88,88,88,-57,88,88,88,-32,88,88,-66,-67,88,88,88,]),'NEQ':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,137,138,140,144,150,],[89,-58,-59,-60,-61,-62,-63,-64,-65,89,89,-31,89,89,-56,-55,89,89,-33,-28,-30,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,89,89,89,-57,89,89,89,-32,89,89,-66,-67,89,89,89,]),'LTEQ':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,137,138,140,144,150,],[92,-58,-59,-60,-61,-62,-63,-64,-65,92,92,-31,92,92,-56,-55,92,92,-33,-28,-30,-43,-44,-45,-46,92,92,-49,-50,-51,-52,92,92,92,-57,92,92,92,-32,92,92,-66,-67,92,92,92,]),'GTEQ':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,137,138,140,144,150,],[93,-58,-59,-60,-61,-62,-63,-64,-65,93,93,-31,93,93,-56,-55,93,93,-33,-28,-30,-43,-44,-45,-46,93,93,-49,-50,-51,-52,93,93,93,-57,93,93,93,-32,93,93,-66,-67,93,93,93,]),'AND':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,137,138,140,144,150,],[94,-58,-59,-60,-61,-62,-63,-64,-65,94,94,-31,94,94,-56,-55,94,94,-33,-28,-30,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,94,94,-57,94,94,94,-32,94,94,-66,-67,94,94,94,]),'OR':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,137,138,140,144,150,],[95,-58,-59,-60,-61,-62,-63,-64,-65,95,95,-31,95,95,-56,-55,95,95,-33,-28,-30,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,95,-57,95,95,95,-32,95,95,-66,-67,95,95,95,]),'QMARK':([57,62,63,64,65,66,67,68,69,77,78,80,81,82,97,98,99,104,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,137,138,140,144,150,],[96,-58,-59,-60,-61,-62,-63,-64,-65,96,96,-31,96,96,-56,-55,96,96,-33,-28,-30,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,96,-57,96,96,96,-32,96,96,-66,-67,96,96,96,]),'RSQUAREBR':([62,63,64,65,66,67,68,69,78,80,97,98,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,137,138,139,144,],[-58,-59,-60,-61,-62,-63,-64,-65,110,-31,-56,-55,-33,-28,-30,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-57,139,-32,-66,-67,145,-68,]),'COLON':([62,63,64,65,66,67,68,69,80,97,98,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,133,137,138,144,],[-58,-59,-60,-61,-62,-63,-64,-65,-31,-56,-55,-33,-28,-30,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,136,-57,-32,-66,-67,-68,]),'TO':([62,63,64,65,66,67,68,69,80,97,98,106,110,111,114,115,116,117,118,119,120,121,122,123,124,125,127,133,137,138,140,144,],[-58,-59,-60,-61,-62,-63,-64,-65,-31,-56,-55,-33,-28,-30,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-57,-32,-66,-67,146,-68,]),'BEGIN':([132,142,145,154,158,],[141,148,149,157,160,]),'DO':([132,],[142,]),'ELSE':([156,],[158,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function_list':([0,],[2,]),'function':([0,2,],[3,5,]),'param_list':([7,],[9,]),'parameter':([7,14,],[11,24,]),'type':([12,15,23,49,],[16,25,26,76,]),'stmt_list':([29,30,141,148,149,157,160,],[32,48,147,152,153,159,162,]),'statement':([29,30,32,48,141,147,148,149,152,153,157,159,160,162,],[33,33,54,54,33,54,33,33,54,54,33,54,33,54,]),'var_declaration':([29,30,32,48,141,147,148,149,152,153,157,159,160,162,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'assignment':([29,30,32,48,141,147,148,149,152,153,157,159,160,162,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'function_call_stmt':([29,30,32,48,141,147,148,149,152,153,157,159,160,162,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'return_stmt':([29,30,32,48,141,147,148,149,152,153,157,159,160,162,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'if_stmt':([29,30,32,48,141,147,148,149,152,153,157,159,160,162,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'for_stmt':([29,30,32,48,141,147,148,149,152,153,157,159,160,162,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'while_stmt':([29,30,32,48,141,147,148,149,152,153,157,159,160,162,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'array_access':([29,30,32,43,48,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,108,112,131,136,141,146,147,148,149,152,153,157,159,160,162,],[41,41,41,68,41,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,41,68,41,41,41,41,41,41,41,41,41,]),'function_call':([29,30,32,43,48,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,108,112,131,136,141,146,147,148,149,152,153,157,159,160,162,],[42,42,42,69,42,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,42,69,42,42,42,42,42,42,42,42,42,]),'expression':([43,50,51,52,55,59,60,61,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,108,112,131,136,146,],[57,77,78,81,82,97,98,99,104,81,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,134,135,140,144,150,]),'arg_list':([52,74,100,],[79,105,79,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function_list','program',1,'p_program','parser.py',28),
  ('function_list -> function_list function','function_list',2,'p_function_list','parser.py',32),
  ('function_list -> function','function_list',1,'p_function_list','parser.py',33),
  ('function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR','function',11,'p_function','parser.py',40),
  ('function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR','function',10,'p_function_no_params','parser.py',44),
  ('param_list -> param_list COMMA parameter','param_list',3,'p_param_list','parser.py',48),
  ('param_list -> parameter','param_list',1,'p_param_list','parser.py',49),
  ('parameter -> ID AS type','parameter',3,'p_parameter','parser.py',56),
  ('type -> INT','type',1,'p_type','parser.py',60),
  ('type -> STR','type',1,'p_type','parser.py',61),
  ('type -> MSTR','type',1,'p_type','parser.py',62),
  ('type -> BOOL','type',1,'p_type','parser.py',63),
  ('type -> VECTOR','type',1,'p_type','parser.py',64),
  ('type -> NULL','type',1,'p_type','parser.py',65),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',69),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',70),
  ('statement -> var_declaration','statement',1,'p_statement','parser.py',84),
  ('statement -> assignment','statement',1,'p_statement','parser.py',85),
  ('statement -> function_call_stmt','statement',1,'p_statement','parser.py',86),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',87),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',88),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',89),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',90),
  ('var_declaration -> ID DBL_COLON type SEMI_COLON','var_declaration',4,'p_var_declaration','parser.py',98),
  ('var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON','var_declaration',6,'p_var_declaration','parser.py',99),
  ('assignment -> ID EQ expression SEMI_COLON','assignment',4,'p_assignment','parser.py',111),
  ('assignment -> array_access EQ expression SEMI_COLON','assignment',4,'p_assignment','parser.py',112),
  ('array_access -> ID LSQUAREBR expression RSQUAREBR','array_access',4,'p_array_access','parser.py',116),
  ('function_call_stmt -> function_call SEMI_COLON','function_call_stmt',2,'p_function_call_stmt','parser.py',120),
  ('function_call -> ID LPAREN arg_list RPAREN','function_call',4,'p_function_call','parser.py',124),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','parser.py',125),
  ('function_call -> PRINT LPAREN arg_list RPAREN','function_call',4,'p_function_call','parser.py',126),
  ('function_call -> PRINT LPAREN RPAREN','function_call',3,'p_function_call','parser.py',127),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',134),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',135),
  ('return_stmt -> RETURN expression SEMI_COLON','return_stmt',3,'p_return_stmt','parser.py',142),
  ('return_stmt -> RETURN SEMI_COLON','return_stmt',2,'p_return_stmt','parser.py',143),
  ('if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR BEGIN stmt_list END','if_stmt',9,'p_if_stmt','parser.py',150),
  ('if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR BEGIN stmt_list END ELSE BEGIN stmt_list END','if_stmt',13,'p_if_stmt','parser.py',151),
  ('for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END','for_stmt',11,'p_for_stmt','parser.py',158),
  ('while_stmt -> WHILE LPAREN expression RPAREN BEGIN stmt_list END','while_stmt',7,'p_while_stmt','parser.py',162),
  ('while_stmt -> WHILE LPAREN expression RPAREN DO BEGIN stmt_list END','while_stmt',8,'p_while_stmt','parser.py',163),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',170),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',171),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',172),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',173),
  ('expression -> expression EQEQ expression','expression',3,'p_expression_binop','parser.py',174),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',175),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binop','parser.py',176),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binop','parser.py',177),
  ('expression -> expression LTEQ expression','expression',3,'p_expression_binop','parser.py',178),
  ('expression -> expression GTEQ expression','expression',3,'p_expression_binop','parser.py',179),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',180),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',181),
  ('expression -> NOT expression','expression',2,'p_expression_unary','parser.py',185),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','parser.py',186),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',190),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',194),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',198),
  ('expression -> MSTRING','expression',1,'p_expression_string','parser.py',199),
  ('expression -> TRUE','expression',1,'p_expression_boolean','parser.py',203),
  ('expression -> FALSE','expression',1,'p_expression_boolean','parser.py',204),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',208),
  ('expression -> array_access','expression',1,'p_expression_array_access','parser.py',212),
  ('expression -> function_call','expression',1,'p_expression_function_call','parser.py',216),
  ('expression -> ID LPAREN expression RPAREN','expression',4,'p_expression_list_call','parser.py',220),
  ('expression -> LEN LPAREN expression RPAREN','expression',4,'p_expression_length','parser.py',229),
  ('expression -> expression QMARK expression COLON expression','expression',5,'p_expression_ternary','parser.py',233),
]
