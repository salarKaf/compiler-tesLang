Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> function_list
Rule 2     function_list -> function_list function
Rule 3     function_list -> function
Rule 4     function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
Rule 5     function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
Rule 6     function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
Rule 7     function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
Rule 8     param_list -> param_list COMMA parameter
Rule 9     param_list -> parameter
Rule 10    parameter -> ID AS type
Rule 11    type -> INT
Rule 12    type -> STR
Rule 13    type -> MSTR
Rule 14    type -> BOOL
Rule 15    type -> VECTOR
Rule 16    type -> NULL
Rule 17    stmt_list -> stmt_list statement
Rule 18    stmt_list -> statement
Rule 19    stmt_list -> empty
Rule 20    statement -> var_declaration
Rule 21    statement -> assignment
Rule 22    statement -> function_call_stmt
Rule 23    statement -> return_stmt
Rule 24    statement -> if_stmt
Rule 25    statement -> for_stmt
Rule 26    statement -> while_stmt
Rule 27    statement -> do_while_stmt
Rule 28    statement -> block_stmt
Rule 29    statement -> function
Rule 30    var_declaration -> ID DBL_COLON type SEMI_COLON
Rule 31    var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON
Rule 32    assignment -> ID EQ expression SEMI_COLON
Rule 33    assignment -> array_access EQ expression SEMI_COLON
Rule 34    array_access -> ID LSQUAREBR expression RSQUAREBR
Rule 35    function_call_stmt -> function_call SEMI_COLON
Rule 36    function_call -> ID LPAREN arg_list RPAREN
Rule 37    function_call -> ID LPAREN RPAREN
Rule 38    function_call -> PRINT LPAREN arg_list RPAREN
Rule 39    function_call -> PRINT LPAREN RPAREN
Rule 40    function_call -> LEN LPAREN expression RPAREN
Rule 41    arg_list -> arg_list COMMA expression
Rule 42    arg_list -> expression
Rule 43    return_stmt -> RETURN expression SEMI_COLON
Rule 44    return_stmt -> RETURN SEMI_COLON
Rule 45    if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
Rule 46    if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement
Rule 47    for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END
Rule 48    while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
Rule 49    do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
Rule 50    block_stmt -> BEGIN stmt_list END
Rule 51    expression -> expression PLUS expression
Rule 52    expression -> expression MINUS expression
Rule 53    expression -> expression MULTIPLY expression
Rule 54    expression -> expression DIVIDE expression
Rule 55    expression -> expression EQEQ expression
Rule 56    expression -> expression NEQ expression
Rule 57    expression -> expression LESS_THAN expression
Rule 58    expression -> expression GREATER_THAN expression
Rule 59    expression -> expression LTEQ expression
Rule 60    expression -> expression GTEQ expression
Rule 61    expression -> expression AND expression
Rule 62    expression -> expression OR expression
Rule 63    expression -> NOT expression
Rule 64    expression -> MINUS expression
Rule 65    expression -> PLUS expression
Rule 66    expression -> expression QMARK expression COLON expression
Rule 67    expression -> LPAREN expression RPAREN
Rule 68    expression -> LSQUAREBR arg_list RSQUAREBR
Rule 69    expression -> LSQUAREBR RSQUAREBR
Rule 70    expression -> NUMBER
Rule 71    expression -> STRING
Rule 72    expression -> MSTRING
Rule 73    expression -> TRUE
Rule 74    expression -> FALSE
Rule 75    expression -> ID
Rule 76    expression -> array_access
Rule 77    expression -> function_call
Rule 78    empty -> <empty>

Terminals, with rules where they appear

AND                  : 61
ARROW                : 6 7
AS                   : 10
BEGIN                : 47 50
BOOL                 : 14
COLON                : 66
COMMA                : 8 41
DBL_COLON            : 30 31
DIVIDE               : 54
DO                   : 49
ELSE                 : 46
END                  : 47 50
EQ                   : 31 32 33 47
EQEQ                 : 55
FALSE                : 74
FOR                  : 47
FUNK                 : 4 5 6 7
GREATER_THAN         : 4 5 6 7 58
GTEQ                 : 60
ID                   : 4 5 6 7 10 30 31 32 34 36 37 47 75
IF                   : 45 46
INT                  : 11
LCURLYEBR            : 4 5
LEN                  : 40
LESS_THAN            : 4 5 6 7 57
LPAREN               : 4 5 6 7 36 37 38 39 40 47 67
LSQUAREBR            : 34 45 45 46 46 48 48 49 49 68 69
LTEQ                 : 59
MINUS                : 52 64
MSTR                 : 13
MSTRING              : 72
MULTIPLY             : 53
NEQ                  : 56
NOT                  : 63
NULL                 : 16
NUMBER               : 70
OR                   : 62
PLUS                 : 51 65
PRINT                : 38 39
QMARK                : 66
RCURLYEBR            : 4 5
RETURN               : 6 7 43 44
RPAREN               : 4 5 6 7 36 37 38 39 40 47 67
RSQUAREBR            : 34 45 45 46 46 48 48 49 49 68 69
SEMI_COLON           : 6 7 30 31 32 33 35 43 44 49
STR                  : 12
STRING               : 71
TO                   : 47
TRUE                 : 73
VECTOR               : 15
WHILE                : 48 49
error                : 

Nonterminals, with rules where they appear

arg_list             : 36 38 41 68
array_access         : 33 76
assignment           : 21
block_stmt           : 28
do_while_stmt        : 27
empty                : 19
expression           : 6 7 31 32 33 34 40 41 42 43 45 46 47 47 48 49 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 64 65 66 66 66 67
for_stmt             : 25
function             : 2 3 29
function_call        : 35 77
function_call_stmt   : 22
function_list        : 1 2
if_stmt              : 24
param_list           : 4 6 8
parameter            : 8 9
program              : 0
return_stmt          : 23
statement            : 17 18 45 46 46 48 49
stmt_list            : 4 5 17 47 50
type                 : 4 5 6 7 10 30 31
var_declaration      : 20
while_stmt           : 26

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_list
    (2) function_list -> . function_list function
    (3) function_list -> . function
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON

    FUNK            shift and go to state 4

    program                        shift and go to state 1
    function_list                  shift and go to state 2
    function                       shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> function_list .
    (2) function_list -> function_list . function
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON

    $end            reduce using rule 1 (program -> function_list .)
    FUNK            shift and go to state 4

    function                       shift and go to state 5

state 3

    (3) function_list -> function .

    FUNK            reduce using rule 3 (function_list -> function .)
    $end            reduce using rule 3 (function_list -> function .)


state 4

    (4) function -> FUNK . ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> FUNK . ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> FUNK . ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> FUNK . ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON

    ID              shift and go to state 6


state 5

    (2) function_list -> function_list function .

    FUNK            reduce using rule 2 (function_list -> function_list function .)
    $end            reduce using rule 2 (function_list -> function_list function .)


state 6

    (4) function -> FUNK ID . LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> FUNK ID . LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> FUNK ID . LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> FUNK ID . LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON

    LPAREN          shift and go to state 7


state 7

    (4) function -> FUNK ID LPAREN . param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> FUNK ID LPAREN . RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> FUNK ID LPAREN . param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> FUNK ID LPAREN . RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (8) param_list -> . param_list COMMA parameter
    (9) param_list -> . parameter
    (10) parameter -> . ID AS type

    RPAREN          shift and go to state 10
    ID              shift and go to state 8

    param_list                     shift and go to state 9
    parameter                      shift and go to state 11

state 8

    (10) parameter -> ID . AS type

    AS              shift and go to state 12


state 9

    (4) function -> FUNK ID LPAREN param_list . RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> FUNK ID LPAREN param_list . RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (8) param_list -> param_list . COMMA parameter

    RPAREN          shift and go to state 13
    COMMA           shift and go to state 14


state 10

    (5) function -> FUNK ID LPAREN RPAREN . LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (7) function -> FUNK ID LPAREN RPAREN . LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON

    LESS_THAN       shift and go to state 15


state 11

    (9) param_list -> parameter .

    RPAREN          reduce using rule 9 (param_list -> parameter .)
    COMMA           reduce using rule 9 (param_list -> parameter .)


state 12

    (10) parameter -> ID AS . type
    (11) type -> . INT
    (12) type -> . STR
    (13) type -> . MSTR
    (14) type -> . BOOL
    (15) type -> . VECTOR
    (16) type -> . NULL

    INT             shift and go to state 17
    STR             shift and go to state 18
    MSTR            shift and go to state 19
    BOOL            shift and go to state 20
    VECTOR          shift and go to state 21
    NULL            shift and go to state 22

    type                           shift and go to state 16

state 13

    (4) function -> FUNK ID LPAREN param_list RPAREN . LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> FUNK ID LPAREN param_list RPAREN . LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON

    LESS_THAN       shift and go to state 23


state 14

    (8) param_list -> param_list COMMA . parameter
    (10) parameter -> . ID AS type

    ID              shift and go to state 8

    parameter                      shift and go to state 24

state 15

    (5) function -> FUNK ID LPAREN RPAREN LESS_THAN . type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (7) function -> FUNK ID LPAREN RPAREN LESS_THAN . type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (11) type -> . INT
    (12) type -> . STR
    (13) type -> . MSTR
    (14) type -> . BOOL
    (15) type -> . VECTOR
    (16) type -> . NULL

    INT             shift and go to state 17
    STR             shift and go to state 18
    MSTR            shift and go to state 19
    BOOL            shift and go to state 20
    VECTOR          shift and go to state 21
    NULL            shift and go to state 22

    type                           shift and go to state 25

state 16

    (10) parameter -> ID AS type .

    RPAREN          reduce using rule 10 (parameter -> ID AS type .)
    COMMA           reduce using rule 10 (parameter -> ID AS type .)


state 17

    (11) type -> INT .

    RPAREN          reduce using rule 11 (type -> INT .)
    COMMA           reduce using rule 11 (type -> INT .)
    GREATER_THAN    reduce using rule 11 (type -> INT .)
    SEMI_COLON      reduce using rule 11 (type -> INT .)
    EQ              reduce using rule 11 (type -> INT .)


state 18

    (12) type -> STR .

    RPAREN          reduce using rule 12 (type -> STR .)
    COMMA           reduce using rule 12 (type -> STR .)
    GREATER_THAN    reduce using rule 12 (type -> STR .)
    SEMI_COLON      reduce using rule 12 (type -> STR .)
    EQ              reduce using rule 12 (type -> STR .)


state 19

    (13) type -> MSTR .

    RPAREN          reduce using rule 13 (type -> MSTR .)
    COMMA           reduce using rule 13 (type -> MSTR .)
    GREATER_THAN    reduce using rule 13 (type -> MSTR .)
    SEMI_COLON      reduce using rule 13 (type -> MSTR .)
    EQ              reduce using rule 13 (type -> MSTR .)


state 20

    (14) type -> BOOL .

    RPAREN          reduce using rule 14 (type -> BOOL .)
    COMMA           reduce using rule 14 (type -> BOOL .)
    GREATER_THAN    reduce using rule 14 (type -> BOOL .)
    SEMI_COLON      reduce using rule 14 (type -> BOOL .)
    EQ              reduce using rule 14 (type -> BOOL .)


state 21

    (15) type -> VECTOR .

    RPAREN          reduce using rule 15 (type -> VECTOR .)
    COMMA           reduce using rule 15 (type -> VECTOR .)
    GREATER_THAN    reduce using rule 15 (type -> VECTOR .)
    SEMI_COLON      reduce using rule 15 (type -> VECTOR .)
    EQ              reduce using rule 15 (type -> VECTOR .)


state 22

    (16) type -> NULL .

    RPAREN          reduce using rule 16 (type -> NULL .)
    COMMA           reduce using rule 16 (type -> NULL .)
    GREATER_THAN    reduce using rule 16 (type -> NULL .)
    SEMI_COLON      reduce using rule 16 (type -> NULL .)
    EQ              reduce using rule 16 (type -> NULL .)


state 23

    (4) function -> FUNK ID LPAREN param_list RPAREN LESS_THAN . type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> FUNK ID LPAREN param_list RPAREN LESS_THAN . type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (11) type -> . INT
    (12) type -> . STR
    (13) type -> . MSTR
    (14) type -> . BOOL
    (15) type -> . VECTOR
    (16) type -> . NULL

    INT             shift and go to state 17
    STR             shift and go to state 18
    MSTR            shift and go to state 19
    BOOL            shift and go to state 20
    VECTOR          shift and go to state 21
    NULL            shift and go to state 22

    type                           shift and go to state 26

state 24

    (8) param_list -> param_list COMMA parameter .

    RPAREN          reduce using rule 8 (param_list -> param_list COMMA parameter .)
    COMMA           reduce using rule 8 (param_list -> param_list COMMA parameter .)


state 25

    (5) function -> FUNK ID LPAREN RPAREN LESS_THAN type . GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (7) function -> FUNK ID LPAREN RPAREN LESS_THAN type . GREATER_THAN ARROW RETURN expression SEMI_COLON

    GREATER_THAN    shift and go to state 27


state 26

    (4) function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type . GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type . GREATER_THAN ARROW RETURN expression SEMI_COLON

    GREATER_THAN    shift and go to state 28


state 27

    (5) function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN . LCURLYEBR stmt_list RCURLYEBR
    (7) function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN . ARROW RETURN expression SEMI_COLON

    LCURLYEBR       shift and go to state 29
    ARROW           shift and go to state 30


state 28

    (4) function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN . LCURLYEBR stmt_list RCURLYEBR
    (6) function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN . ARROW RETURN expression SEMI_COLON

    LCURLYEBR       shift and go to state 31
    ARROW           shift and go to state 32


state 29

    (5) function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR . stmt_list RCURLYEBR
    (17) stmt_list -> . stmt_list statement
    (18) stmt_list -> . statement
    (19) stmt_list -> . empty
    (20) statement -> . var_declaration
    (21) statement -> . assignment
    (22) statement -> . function_call_stmt
    (23) statement -> . return_stmt
    (24) statement -> . if_stmt
    (25) statement -> . for_stmt
    (26) statement -> . while_stmt
    (27) statement -> . do_while_stmt
    (28) statement -> . block_stmt
    (29) statement -> . function
    (78) empty -> .
    (30) var_declaration -> . ID DBL_COLON type SEMI_COLON
    (31) var_declaration -> . ID DBL_COLON type EQ expression SEMI_COLON
    (32) assignment -> . ID EQ expression SEMI_COLON
    (33) assignment -> . array_access EQ expression SEMI_COLON
    (35) function_call_stmt -> . function_call SEMI_COLON
    (43) return_stmt -> . RETURN expression SEMI_COLON
    (44) return_stmt -> . RETURN SEMI_COLON
    (45) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement
    (47) for_stmt -> . FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END
    (48) while_stmt -> . WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (49) do_while_stmt -> . DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
    (50) block_stmt -> . BEGIN stmt_list END
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FUNK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for LEN resolved as shift
    RCURLYEBR       reduce using rule 78 (empty -> .)
    ID              shift and go to state 33
    RETURN          shift and go to state 49
    IF              shift and go to state 50
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    DO              shift and go to state 54
    BEGIN           shift and go to state 52
    FUNK            shift and go to state 4
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

  ! ID              [ reduce using rule 78 (empty -> .) ]
  ! RETURN          [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! DO              [ reduce using rule 78 (empty -> .) ]
  ! BEGIN           [ reduce using rule 78 (empty -> .) ]
  ! FUNK            [ reduce using rule 78 (empty -> .) ]
  ! PRINT           [ reduce using rule 78 (empty -> .) ]
  ! LEN             [ reduce using rule 78 (empty -> .) ]

    stmt_list                      shift and go to state 34
    statement                      shift and go to state 35
    empty                          shift and go to state 36
    var_declaration                shift and go to state 37
    assignment                     shift and go to state 38
    function_call_stmt             shift and go to state 39
    return_stmt                    shift and go to state 40
    if_stmt                        shift and go to state 41
    for_stmt                       shift and go to state 42
    while_stmt                     shift and go to state 43
    do_while_stmt                  shift and go to state 44
    block_stmt                     shift and go to state 45
    function                       shift and go to state 46
    array_access                   shift and go to state 47
    function_call                  shift and go to state 48

state 30

    (7) function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW . RETURN expression SEMI_COLON

    RETURN          shift and go to state 57


state 31

    (4) function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR . stmt_list RCURLYEBR
    (17) stmt_list -> . stmt_list statement
    (18) stmt_list -> . statement
    (19) stmt_list -> . empty
    (20) statement -> . var_declaration
    (21) statement -> . assignment
    (22) statement -> . function_call_stmt
    (23) statement -> . return_stmt
    (24) statement -> . if_stmt
    (25) statement -> . for_stmt
    (26) statement -> . while_stmt
    (27) statement -> . do_while_stmt
    (28) statement -> . block_stmt
    (29) statement -> . function
    (78) empty -> .
    (30) var_declaration -> . ID DBL_COLON type SEMI_COLON
    (31) var_declaration -> . ID DBL_COLON type EQ expression SEMI_COLON
    (32) assignment -> . ID EQ expression SEMI_COLON
    (33) assignment -> . array_access EQ expression SEMI_COLON
    (35) function_call_stmt -> . function_call SEMI_COLON
    (43) return_stmt -> . RETURN expression SEMI_COLON
    (44) return_stmt -> . RETURN SEMI_COLON
    (45) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement
    (47) for_stmt -> . FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END
    (48) while_stmt -> . WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (49) do_while_stmt -> . DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
    (50) block_stmt -> . BEGIN stmt_list END
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FUNK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for LEN resolved as shift
    RCURLYEBR       reduce using rule 78 (empty -> .)
    ID              shift and go to state 33
    RETURN          shift and go to state 49
    IF              shift and go to state 50
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    DO              shift and go to state 54
    BEGIN           shift and go to state 52
    FUNK            shift and go to state 4
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

  ! ID              [ reduce using rule 78 (empty -> .) ]
  ! RETURN          [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! DO              [ reduce using rule 78 (empty -> .) ]
  ! BEGIN           [ reduce using rule 78 (empty -> .) ]
  ! FUNK            [ reduce using rule 78 (empty -> .) ]
  ! PRINT           [ reduce using rule 78 (empty -> .) ]
  ! LEN             [ reduce using rule 78 (empty -> .) ]

    stmt_list                      shift and go to state 58
    statement                      shift and go to state 35
    empty                          shift and go to state 36
    var_declaration                shift and go to state 37
    assignment                     shift and go to state 38
    function_call_stmt             shift and go to state 39
    return_stmt                    shift and go to state 40
    if_stmt                        shift and go to state 41
    for_stmt                       shift and go to state 42
    while_stmt                     shift and go to state 43
    do_while_stmt                  shift and go to state 44
    block_stmt                     shift and go to state 45
    function                       shift and go to state 46
    array_access                   shift and go to state 47
    function_call                  shift and go to state 48

state 32

    (6) function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW . RETURN expression SEMI_COLON

    RETURN          shift and go to state 59


state 33

    (30) var_declaration -> ID . DBL_COLON type SEMI_COLON
    (31) var_declaration -> ID . DBL_COLON type EQ expression SEMI_COLON
    (32) assignment -> ID . EQ expression SEMI_COLON
    (34) array_access -> ID . LSQUAREBR expression RSQUAREBR
    (36) function_call -> ID . LPAREN arg_list RPAREN
    (37) function_call -> ID . LPAREN RPAREN

    DBL_COLON       shift and go to state 60
    EQ              shift and go to state 61
    LSQUAREBR       shift and go to state 62
    LPAREN          shift and go to state 63


state 34

    (5) function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list . RCURLYEBR
    (17) stmt_list -> stmt_list . statement
    (20) statement -> . var_declaration
    (21) statement -> . assignment
    (22) statement -> . function_call_stmt
    (23) statement -> . return_stmt
    (24) statement -> . if_stmt
    (25) statement -> . for_stmt
    (26) statement -> . while_stmt
    (27) statement -> . do_while_stmt
    (28) statement -> . block_stmt
    (29) statement -> . function
    (30) var_declaration -> . ID DBL_COLON type SEMI_COLON
    (31) var_declaration -> . ID DBL_COLON type EQ expression SEMI_COLON
    (32) assignment -> . ID EQ expression SEMI_COLON
    (33) assignment -> . array_access EQ expression SEMI_COLON
    (35) function_call_stmt -> . function_call SEMI_COLON
    (43) return_stmt -> . RETURN expression SEMI_COLON
    (44) return_stmt -> . RETURN SEMI_COLON
    (45) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement
    (47) for_stmt -> . FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END
    (48) while_stmt -> . WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (49) do_while_stmt -> . DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
    (50) block_stmt -> . BEGIN stmt_list END
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    RCURLYEBR       shift and go to state 64
    ID              shift and go to state 33
    RETURN          shift and go to state 49
    IF              shift and go to state 50
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    DO              shift and go to state 54
    BEGIN           shift and go to state 52
    FUNK            shift and go to state 4
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    statement                      shift and go to state 65
    var_declaration                shift and go to state 37
    assignment                     shift and go to state 38
    function_call_stmt             shift and go to state 39
    return_stmt                    shift and go to state 40
    if_stmt                        shift and go to state 41
    for_stmt                       shift and go to state 42
    while_stmt                     shift and go to state 43
    do_while_stmt                  shift and go to state 44
    block_stmt                     shift and go to state 45
    function                       shift and go to state 46
    array_access                   shift and go to state 47
    function_call                  shift and go to state 48

state 35

    (18) stmt_list -> statement .

    RCURLYEBR       reduce using rule 18 (stmt_list -> statement .)
    ID              reduce using rule 18 (stmt_list -> statement .)
    RETURN          reduce using rule 18 (stmt_list -> statement .)
    IF              reduce using rule 18 (stmt_list -> statement .)
    FOR             reduce using rule 18 (stmt_list -> statement .)
    WHILE           reduce using rule 18 (stmt_list -> statement .)
    DO              reduce using rule 18 (stmt_list -> statement .)
    BEGIN           reduce using rule 18 (stmt_list -> statement .)
    FUNK            reduce using rule 18 (stmt_list -> statement .)
    PRINT           reduce using rule 18 (stmt_list -> statement .)
    LEN             reduce using rule 18 (stmt_list -> statement .)
    END             reduce using rule 18 (stmt_list -> statement .)


state 36

    (19) stmt_list -> empty .

    RCURLYEBR       reduce using rule 19 (stmt_list -> empty .)
    ID              reduce using rule 19 (stmt_list -> empty .)
    RETURN          reduce using rule 19 (stmt_list -> empty .)
    IF              reduce using rule 19 (stmt_list -> empty .)
    FOR             reduce using rule 19 (stmt_list -> empty .)
    WHILE           reduce using rule 19 (stmt_list -> empty .)
    DO              reduce using rule 19 (stmt_list -> empty .)
    BEGIN           reduce using rule 19 (stmt_list -> empty .)
    FUNK            reduce using rule 19 (stmt_list -> empty .)
    PRINT           reduce using rule 19 (stmt_list -> empty .)
    LEN             reduce using rule 19 (stmt_list -> empty .)
    END             reduce using rule 19 (stmt_list -> empty .)


state 37

    (20) statement -> var_declaration .

    RCURLYEBR       reduce using rule 20 (statement -> var_declaration .)
    ID              reduce using rule 20 (statement -> var_declaration .)
    RETURN          reduce using rule 20 (statement -> var_declaration .)
    IF              reduce using rule 20 (statement -> var_declaration .)
    FOR             reduce using rule 20 (statement -> var_declaration .)
    WHILE           reduce using rule 20 (statement -> var_declaration .)
    DO              reduce using rule 20 (statement -> var_declaration .)
    BEGIN           reduce using rule 20 (statement -> var_declaration .)
    FUNK            reduce using rule 20 (statement -> var_declaration .)
    PRINT           reduce using rule 20 (statement -> var_declaration .)
    LEN             reduce using rule 20 (statement -> var_declaration .)
    END             reduce using rule 20 (statement -> var_declaration .)
    ELSE            reduce using rule 20 (statement -> var_declaration .)


state 38

    (21) statement -> assignment .

    RCURLYEBR       reduce using rule 21 (statement -> assignment .)
    ID              reduce using rule 21 (statement -> assignment .)
    RETURN          reduce using rule 21 (statement -> assignment .)
    IF              reduce using rule 21 (statement -> assignment .)
    FOR             reduce using rule 21 (statement -> assignment .)
    WHILE           reduce using rule 21 (statement -> assignment .)
    DO              reduce using rule 21 (statement -> assignment .)
    BEGIN           reduce using rule 21 (statement -> assignment .)
    FUNK            reduce using rule 21 (statement -> assignment .)
    PRINT           reduce using rule 21 (statement -> assignment .)
    LEN             reduce using rule 21 (statement -> assignment .)
    END             reduce using rule 21 (statement -> assignment .)
    ELSE            reduce using rule 21 (statement -> assignment .)


state 39

    (22) statement -> function_call_stmt .

    RCURLYEBR       reduce using rule 22 (statement -> function_call_stmt .)
    ID              reduce using rule 22 (statement -> function_call_stmt .)
    RETURN          reduce using rule 22 (statement -> function_call_stmt .)
    IF              reduce using rule 22 (statement -> function_call_stmt .)
    FOR             reduce using rule 22 (statement -> function_call_stmt .)
    WHILE           reduce using rule 22 (statement -> function_call_stmt .)
    DO              reduce using rule 22 (statement -> function_call_stmt .)
    BEGIN           reduce using rule 22 (statement -> function_call_stmt .)
    FUNK            reduce using rule 22 (statement -> function_call_stmt .)
    PRINT           reduce using rule 22 (statement -> function_call_stmt .)
    LEN             reduce using rule 22 (statement -> function_call_stmt .)
    END             reduce using rule 22 (statement -> function_call_stmt .)
    ELSE            reduce using rule 22 (statement -> function_call_stmt .)


state 40

    (23) statement -> return_stmt .

    RCURLYEBR       reduce using rule 23 (statement -> return_stmt .)
    ID              reduce using rule 23 (statement -> return_stmt .)
    RETURN          reduce using rule 23 (statement -> return_stmt .)
    IF              reduce using rule 23 (statement -> return_stmt .)
    FOR             reduce using rule 23 (statement -> return_stmt .)
    WHILE           reduce using rule 23 (statement -> return_stmt .)
    DO              reduce using rule 23 (statement -> return_stmt .)
    BEGIN           reduce using rule 23 (statement -> return_stmt .)
    FUNK            reduce using rule 23 (statement -> return_stmt .)
    PRINT           reduce using rule 23 (statement -> return_stmt .)
    LEN             reduce using rule 23 (statement -> return_stmt .)
    END             reduce using rule 23 (statement -> return_stmt .)
    ELSE            reduce using rule 23 (statement -> return_stmt .)


state 41

    (24) statement -> if_stmt .

    RCURLYEBR       reduce using rule 24 (statement -> if_stmt .)
    ID              reduce using rule 24 (statement -> if_stmt .)
    RETURN          reduce using rule 24 (statement -> if_stmt .)
    IF              reduce using rule 24 (statement -> if_stmt .)
    FOR             reduce using rule 24 (statement -> if_stmt .)
    WHILE           reduce using rule 24 (statement -> if_stmt .)
    DO              reduce using rule 24 (statement -> if_stmt .)
    BEGIN           reduce using rule 24 (statement -> if_stmt .)
    FUNK            reduce using rule 24 (statement -> if_stmt .)
    PRINT           reduce using rule 24 (statement -> if_stmt .)
    LEN             reduce using rule 24 (statement -> if_stmt .)
    END             reduce using rule 24 (statement -> if_stmt .)
    ELSE            reduce using rule 24 (statement -> if_stmt .)


state 42

    (25) statement -> for_stmt .

    RCURLYEBR       reduce using rule 25 (statement -> for_stmt .)
    ID              reduce using rule 25 (statement -> for_stmt .)
    RETURN          reduce using rule 25 (statement -> for_stmt .)
    IF              reduce using rule 25 (statement -> for_stmt .)
    FOR             reduce using rule 25 (statement -> for_stmt .)
    WHILE           reduce using rule 25 (statement -> for_stmt .)
    DO              reduce using rule 25 (statement -> for_stmt .)
    BEGIN           reduce using rule 25 (statement -> for_stmt .)
    FUNK            reduce using rule 25 (statement -> for_stmt .)
    PRINT           reduce using rule 25 (statement -> for_stmt .)
    LEN             reduce using rule 25 (statement -> for_stmt .)
    END             reduce using rule 25 (statement -> for_stmt .)
    ELSE            reduce using rule 25 (statement -> for_stmt .)


state 43

    (26) statement -> while_stmt .

    RCURLYEBR       reduce using rule 26 (statement -> while_stmt .)
    ID              reduce using rule 26 (statement -> while_stmt .)
    RETURN          reduce using rule 26 (statement -> while_stmt .)
    IF              reduce using rule 26 (statement -> while_stmt .)
    FOR             reduce using rule 26 (statement -> while_stmt .)
    WHILE           reduce using rule 26 (statement -> while_stmt .)
    DO              reduce using rule 26 (statement -> while_stmt .)
    BEGIN           reduce using rule 26 (statement -> while_stmt .)
    FUNK            reduce using rule 26 (statement -> while_stmt .)
    PRINT           reduce using rule 26 (statement -> while_stmt .)
    LEN             reduce using rule 26 (statement -> while_stmt .)
    END             reduce using rule 26 (statement -> while_stmt .)
    ELSE            reduce using rule 26 (statement -> while_stmt .)


state 44

    (27) statement -> do_while_stmt .

    RCURLYEBR       reduce using rule 27 (statement -> do_while_stmt .)
    ID              reduce using rule 27 (statement -> do_while_stmt .)
    RETURN          reduce using rule 27 (statement -> do_while_stmt .)
    IF              reduce using rule 27 (statement -> do_while_stmt .)
    FOR             reduce using rule 27 (statement -> do_while_stmt .)
    WHILE           reduce using rule 27 (statement -> do_while_stmt .)
    DO              reduce using rule 27 (statement -> do_while_stmt .)
    BEGIN           reduce using rule 27 (statement -> do_while_stmt .)
    FUNK            reduce using rule 27 (statement -> do_while_stmt .)
    PRINT           reduce using rule 27 (statement -> do_while_stmt .)
    LEN             reduce using rule 27 (statement -> do_while_stmt .)
    END             reduce using rule 27 (statement -> do_while_stmt .)
    ELSE            reduce using rule 27 (statement -> do_while_stmt .)


state 45

    (28) statement -> block_stmt .

    RCURLYEBR       reduce using rule 28 (statement -> block_stmt .)
    ID              reduce using rule 28 (statement -> block_stmt .)
    RETURN          reduce using rule 28 (statement -> block_stmt .)
    IF              reduce using rule 28 (statement -> block_stmt .)
    FOR             reduce using rule 28 (statement -> block_stmt .)
    WHILE           reduce using rule 28 (statement -> block_stmt .)
    DO              reduce using rule 28 (statement -> block_stmt .)
    BEGIN           reduce using rule 28 (statement -> block_stmt .)
    FUNK            reduce using rule 28 (statement -> block_stmt .)
    PRINT           reduce using rule 28 (statement -> block_stmt .)
    LEN             reduce using rule 28 (statement -> block_stmt .)
    END             reduce using rule 28 (statement -> block_stmt .)
    ELSE            reduce using rule 28 (statement -> block_stmt .)


state 46

    (29) statement -> function .

    RCURLYEBR       reduce using rule 29 (statement -> function .)
    ID              reduce using rule 29 (statement -> function .)
    RETURN          reduce using rule 29 (statement -> function .)
    IF              reduce using rule 29 (statement -> function .)
    FOR             reduce using rule 29 (statement -> function .)
    WHILE           reduce using rule 29 (statement -> function .)
    DO              reduce using rule 29 (statement -> function .)
    BEGIN           reduce using rule 29 (statement -> function .)
    FUNK            reduce using rule 29 (statement -> function .)
    PRINT           reduce using rule 29 (statement -> function .)
    LEN             reduce using rule 29 (statement -> function .)
    END             reduce using rule 29 (statement -> function .)
    ELSE            reduce using rule 29 (statement -> function .)


state 47

    (33) assignment -> array_access . EQ expression SEMI_COLON

    EQ              shift and go to state 66


state 48

    (35) function_call_stmt -> function_call . SEMI_COLON

    SEMI_COLON      shift and go to state 67


state 49

    (43) return_stmt -> RETURN . expression SEMI_COLON
    (44) return_stmt -> RETURN . SEMI_COLON
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    SEMI_COLON      shift and go to state 69
    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 68
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 50

    (45) if_stmt -> IF . LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> IF . LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement

    LSQUAREBR       shift and go to state 83


state 51

    (47) for_stmt -> FOR . LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END

    LPAREN          shift and go to state 84


state 52

    (50) block_stmt -> BEGIN . stmt_list END
    (17) stmt_list -> . stmt_list statement
    (18) stmt_list -> . statement
    (19) stmt_list -> . empty
    (20) statement -> . var_declaration
    (21) statement -> . assignment
    (22) statement -> . function_call_stmt
    (23) statement -> . return_stmt
    (24) statement -> . if_stmt
    (25) statement -> . for_stmt
    (26) statement -> . while_stmt
    (27) statement -> . do_while_stmt
    (28) statement -> . block_stmt
    (29) statement -> . function
    (78) empty -> .
    (30) var_declaration -> . ID DBL_COLON type SEMI_COLON
    (31) var_declaration -> . ID DBL_COLON type EQ expression SEMI_COLON
    (32) assignment -> . ID EQ expression SEMI_COLON
    (33) assignment -> . array_access EQ expression SEMI_COLON
    (35) function_call_stmt -> . function_call SEMI_COLON
    (43) return_stmt -> . RETURN expression SEMI_COLON
    (44) return_stmt -> . RETURN SEMI_COLON
    (45) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement
    (47) for_stmt -> . FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END
    (48) while_stmt -> . WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (49) do_while_stmt -> . DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
    (50) block_stmt -> . BEGIN stmt_list END
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FUNK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for LEN resolved as shift
    END             reduce using rule 78 (empty -> .)
    ID              shift and go to state 33
    RETURN          shift and go to state 49
    IF              shift and go to state 50
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    DO              shift and go to state 54
    BEGIN           shift and go to state 52
    FUNK            shift and go to state 4
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

  ! ID              [ reduce using rule 78 (empty -> .) ]
  ! RETURN          [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! DO              [ reduce using rule 78 (empty -> .) ]
  ! BEGIN           [ reduce using rule 78 (empty -> .) ]
  ! FUNK            [ reduce using rule 78 (empty -> .) ]
  ! PRINT           [ reduce using rule 78 (empty -> .) ]
  ! LEN             [ reduce using rule 78 (empty -> .) ]

    stmt_list                      shift and go to state 85
    statement                      shift and go to state 35
    empty                          shift and go to state 36
    var_declaration                shift and go to state 37
    assignment                     shift and go to state 38
    function_call_stmt             shift and go to state 39
    return_stmt                    shift and go to state 40
    if_stmt                        shift and go to state 41
    for_stmt                       shift and go to state 42
    while_stmt                     shift and go to state 43
    do_while_stmt                  shift and go to state 44
    block_stmt                     shift and go to state 45
    function                       shift and go to state 46
    array_access                   shift and go to state 47
    function_call                  shift and go to state 48

state 53

    (48) while_stmt -> WHILE . LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement

    LSQUAREBR       shift and go to state 86


state 54

    (49) do_while_stmt -> DO . statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
    (20) statement -> . var_declaration
    (21) statement -> . assignment
    (22) statement -> . function_call_stmt
    (23) statement -> . return_stmt
    (24) statement -> . if_stmt
    (25) statement -> . for_stmt
    (26) statement -> . while_stmt
    (27) statement -> . do_while_stmt
    (28) statement -> . block_stmt
    (29) statement -> . function
    (30) var_declaration -> . ID DBL_COLON type SEMI_COLON
    (31) var_declaration -> . ID DBL_COLON type EQ expression SEMI_COLON
    (32) assignment -> . ID EQ expression SEMI_COLON
    (33) assignment -> . array_access EQ expression SEMI_COLON
    (35) function_call_stmt -> . function_call SEMI_COLON
    (43) return_stmt -> . RETURN expression SEMI_COLON
    (44) return_stmt -> . RETURN SEMI_COLON
    (45) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement
    (47) for_stmt -> . FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END
    (48) while_stmt -> . WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (49) do_while_stmt -> . DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
    (50) block_stmt -> . BEGIN stmt_list END
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    ID              shift and go to state 33
    RETURN          shift and go to state 49
    IF              shift and go to state 50
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    DO              shift and go to state 54
    BEGIN           shift and go to state 52
    FUNK            shift and go to state 4
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    statement                      shift and go to state 87
    var_declaration                shift and go to state 37
    assignment                     shift and go to state 38
    function_call_stmt             shift and go to state 39
    return_stmt                    shift and go to state 40
    if_stmt                        shift and go to state 41
    for_stmt                       shift and go to state 42
    while_stmt                     shift and go to state 43
    do_while_stmt                  shift and go to state 44
    block_stmt                     shift and go to state 45
    function                       shift and go to state 46
    array_access                   shift and go to state 47
    function_call                  shift and go to state 48

state 55

    (38) function_call -> PRINT . LPAREN arg_list RPAREN
    (39) function_call -> PRINT . LPAREN RPAREN

    LPAREN          shift and go to state 88


state 56

    (40) function_call -> LEN . LPAREN expression RPAREN

    LPAREN          shift and go to state 89


state 57

    (7) function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN . expression SEMI_COLON
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 90
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 58

    (4) function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list . RCURLYEBR
    (17) stmt_list -> stmt_list . statement
    (20) statement -> . var_declaration
    (21) statement -> . assignment
    (22) statement -> . function_call_stmt
    (23) statement -> . return_stmt
    (24) statement -> . if_stmt
    (25) statement -> . for_stmt
    (26) statement -> . while_stmt
    (27) statement -> . do_while_stmt
    (28) statement -> . block_stmt
    (29) statement -> . function
    (30) var_declaration -> . ID DBL_COLON type SEMI_COLON
    (31) var_declaration -> . ID DBL_COLON type EQ expression SEMI_COLON
    (32) assignment -> . ID EQ expression SEMI_COLON
    (33) assignment -> . array_access EQ expression SEMI_COLON
    (35) function_call_stmt -> . function_call SEMI_COLON
    (43) return_stmt -> . RETURN expression SEMI_COLON
    (44) return_stmt -> . RETURN SEMI_COLON
    (45) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement
    (47) for_stmt -> . FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END
    (48) while_stmt -> . WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (49) do_while_stmt -> . DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
    (50) block_stmt -> . BEGIN stmt_list END
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    RCURLYEBR       shift and go to state 91
    ID              shift and go to state 33
    RETURN          shift and go to state 49
    IF              shift and go to state 50
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    DO              shift and go to state 54
    BEGIN           shift and go to state 52
    FUNK            shift and go to state 4
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    statement                      shift and go to state 65
    var_declaration                shift and go to state 37
    assignment                     shift and go to state 38
    function_call_stmt             shift and go to state 39
    return_stmt                    shift and go to state 40
    if_stmt                        shift and go to state 41
    for_stmt                       shift and go to state 42
    while_stmt                     shift and go to state 43
    do_while_stmt                  shift and go to state 44
    block_stmt                     shift and go to state 45
    function                       shift and go to state 46
    array_access                   shift and go to state 47
    function_call                  shift and go to state 48

state 59

    (6) function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN . expression SEMI_COLON
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 92
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 60

    (30) var_declaration -> ID DBL_COLON . type SEMI_COLON
    (31) var_declaration -> ID DBL_COLON . type EQ expression SEMI_COLON
    (11) type -> . INT
    (12) type -> . STR
    (13) type -> . MSTR
    (14) type -> . BOOL
    (15) type -> . VECTOR
    (16) type -> . NULL

    INT             shift and go to state 17
    STR             shift and go to state 18
    MSTR            shift and go to state 19
    BOOL            shift and go to state 20
    VECTOR          shift and go to state 21
    NULL            shift and go to state 22

    type                           shift and go to state 93

state 61

    (32) assignment -> ID EQ . expression SEMI_COLON
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 94
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 62

    (34) array_access -> ID LSQUAREBR . expression RSQUAREBR
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 95
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 63

    (36) function_call -> ID LPAREN . arg_list RPAREN
    (37) function_call -> ID LPAREN . RPAREN
    (41) arg_list -> . arg_list COMMA expression
    (42) arg_list -> . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    RPAREN          shift and go to state 97
    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    arg_list                       shift and go to state 96
    expression                     shift and go to state 98
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 64

    (5) function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .

    FUNK            reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    $end            reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    RCURLYEBR       reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    ID              reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    RETURN          reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    IF              reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    FOR             reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    WHILE           reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    DO              reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    BEGIN           reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    PRINT           reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    LEN             reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    END             reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    ELSE            reduce using rule 5 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)


state 65

    (17) stmt_list -> stmt_list statement .

    RCURLYEBR       reduce using rule 17 (stmt_list -> stmt_list statement .)
    ID              reduce using rule 17 (stmt_list -> stmt_list statement .)
    RETURN          reduce using rule 17 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 17 (stmt_list -> stmt_list statement .)
    FOR             reduce using rule 17 (stmt_list -> stmt_list statement .)
    WHILE           reduce using rule 17 (stmt_list -> stmt_list statement .)
    DO              reduce using rule 17 (stmt_list -> stmt_list statement .)
    BEGIN           reduce using rule 17 (stmt_list -> stmt_list statement .)
    FUNK            reduce using rule 17 (stmt_list -> stmt_list statement .)
    PRINT           reduce using rule 17 (stmt_list -> stmt_list statement .)
    LEN             reduce using rule 17 (stmt_list -> stmt_list statement .)
    END             reduce using rule 17 (stmt_list -> stmt_list statement .)


state 66

    (33) assignment -> array_access EQ . expression SEMI_COLON
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    array_access                   shift and go to state 81
    expression                     shift and go to state 99
    function_call                  shift and go to state 82

state 67

    (35) function_call_stmt -> function_call SEMI_COLON .

    RCURLYEBR       reduce using rule 35 (function_call_stmt -> function_call SEMI_COLON .)
    ID              reduce using rule 35 (function_call_stmt -> function_call SEMI_COLON .)
    RETURN          reduce using rule 35 (function_call_stmt -> function_call SEMI_COLON .)
    IF              reduce using rule 35 (function_call_stmt -> function_call SEMI_COLON .)
    FOR             reduce using rule 35 (function_call_stmt -> function_call SEMI_COLON .)
    WHILE           reduce using rule 35 (function_call_stmt -> function_call SEMI_COLON .)
    DO              reduce using rule 35 (function_call_stmt -> function_call SEMI_COLON .)
    BEGIN           reduce using rule 35 (function_call_stmt -> function_call SEMI_COLON .)
    FUNK            reduce using rule 35 (function_call_stmt -> function_call SEMI_COLON .)
    PRINT           reduce using rule 35 (function_call_stmt -> function_call SEMI_COLON .)
    LEN             reduce using rule 35 (function_call_stmt -> function_call SEMI_COLON .)
    END             reduce using rule 35 (function_call_stmt -> function_call SEMI_COLON .)
    ELSE            reduce using rule 35 (function_call_stmt -> function_call SEMI_COLON .)


state 68

    (43) return_stmt -> RETURN expression . SEMI_COLON
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 69

    (44) return_stmt -> RETURN SEMI_COLON .

    RCURLYEBR       reduce using rule 44 (return_stmt -> RETURN SEMI_COLON .)
    ID              reduce using rule 44 (return_stmt -> RETURN SEMI_COLON .)
    RETURN          reduce using rule 44 (return_stmt -> RETURN SEMI_COLON .)
    IF              reduce using rule 44 (return_stmt -> RETURN SEMI_COLON .)
    FOR             reduce using rule 44 (return_stmt -> RETURN SEMI_COLON .)
    WHILE           reduce using rule 44 (return_stmt -> RETURN SEMI_COLON .)
    DO              reduce using rule 44 (return_stmt -> RETURN SEMI_COLON .)
    BEGIN           reduce using rule 44 (return_stmt -> RETURN SEMI_COLON .)
    FUNK            reduce using rule 44 (return_stmt -> RETURN SEMI_COLON .)
    PRINT           reduce using rule 44 (return_stmt -> RETURN SEMI_COLON .)
    LEN             reduce using rule 44 (return_stmt -> RETURN SEMI_COLON .)
    END             reduce using rule 44 (return_stmt -> RETURN SEMI_COLON .)
    ELSE            reduce using rule 44 (return_stmt -> RETURN SEMI_COLON .)


state 70

    (65) expression -> PLUS . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 114
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 71

    (64) expression -> MINUS . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 115
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 72

    (63) expression -> NOT . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 116
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 73

    (67) expression -> LPAREN . expression RPAREN
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 117
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 74

    (68) expression -> LSQUAREBR . arg_list RSQUAREBR
    (69) expression -> LSQUAREBR . RSQUAREBR
    (41) arg_list -> . arg_list COMMA expression
    (42) arg_list -> . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    RSQUAREBR       shift and go to state 119
    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    arg_list                       shift and go to state 118
    expression                     shift and go to state 98
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 75

    (70) expression -> NUMBER .

    SEMI_COLON      reduce using rule 70 (expression -> NUMBER .)
    PLUS            reduce using rule 70 (expression -> NUMBER .)
    MINUS           reduce using rule 70 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 70 (expression -> NUMBER .)
    DIVIDE          reduce using rule 70 (expression -> NUMBER .)
    EQEQ            reduce using rule 70 (expression -> NUMBER .)
    NEQ             reduce using rule 70 (expression -> NUMBER .)
    LESS_THAN       reduce using rule 70 (expression -> NUMBER .)
    GREATER_THAN    reduce using rule 70 (expression -> NUMBER .)
    LTEQ            reduce using rule 70 (expression -> NUMBER .)
    GTEQ            reduce using rule 70 (expression -> NUMBER .)
    AND             reduce using rule 70 (expression -> NUMBER .)
    OR              reduce using rule 70 (expression -> NUMBER .)
    QMARK           reduce using rule 70 (expression -> NUMBER .)
    RSQUAREBR       reduce using rule 70 (expression -> NUMBER .)
    RPAREN          reduce using rule 70 (expression -> NUMBER .)
    COMMA           reduce using rule 70 (expression -> NUMBER .)
    COLON           reduce using rule 70 (expression -> NUMBER .)
    TO              reduce using rule 70 (expression -> NUMBER .)


state 76

    (71) expression -> STRING .

    SEMI_COLON      reduce using rule 71 (expression -> STRING .)
    PLUS            reduce using rule 71 (expression -> STRING .)
    MINUS           reduce using rule 71 (expression -> STRING .)
    MULTIPLY        reduce using rule 71 (expression -> STRING .)
    DIVIDE          reduce using rule 71 (expression -> STRING .)
    EQEQ            reduce using rule 71 (expression -> STRING .)
    NEQ             reduce using rule 71 (expression -> STRING .)
    LESS_THAN       reduce using rule 71 (expression -> STRING .)
    GREATER_THAN    reduce using rule 71 (expression -> STRING .)
    LTEQ            reduce using rule 71 (expression -> STRING .)
    GTEQ            reduce using rule 71 (expression -> STRING .)
    AND             reduce using rule 71 (expression -> STRING .)
    OR              reduce using rule 71 (expression -> STRING .)
    QMARK           reduce using rule 71 (expression -> STRING .)
    RSQUAREBR       reduce using rule 71 (expression -> STRING .)
    RPAREN          reduce using rule 71 (expression -> STRING .)
    COMMA           reduce using rule 71 (expression -> STRING .)
    COLON           reduce using rule 71 (expression -> STRING .)
    TO              reduce using rule 71 (expression -> STRING .)


state 77

    (72) expression -> MSTRING .

    SEMI_COLON      reduce using rule 72 (expression -> MSTRING .)
    PLUS            reduce using rule 72 (expression -> MSTRING .)
    MINUS           reduce using rule 72 (expression -> MSTRING .)
    MULTIPLY        reduce using rule 72 (expression -> MSTRING .)
    DIVIDE          reduce using rule 72 (expression -> MSTRING .)
    EQEQ            reduce using rule 72 (expression -> MSTRING .)
    NEQ             reduce using rule 72 (expression -> MSTRING .)
    LESS_THAN       reduce using rule 72 (expression -> MSTRING .)
    GREATER_THAN    reduce using rule 72 (expression -> MSTRING .)
    LTEQ            reduce using rule 72 (expression -> MSTRING .)
    GTEQ            reduce using rule 72 (expression -> MSTRING .)
    AND             reduce using rule 72 (expression -> MSTRING .)
    OR              reduce using rule 72 (expression -> MSTRING .)
    QMARK           reduce using rule 72 (expression -> MSTRING .)
    RSQUAREBR       reduce using rule 72 (expression -> MSTRING .)
    RPAREN          reduce using rule 72 (expression -> MSTRING .)
    COMMA           reduce using rule 72 (expression -> MSTRING .)
    COLON           reduce using rule 72 (expression -> MSTRING .)
    TO              reduce using rule 72 (expression -> MSTRING .)


state 78

    (73) expression -> TRUE .

    SEMI_COLON      reduce using rule 73 (expression -> TRUE .)
    PLUS            reduce using rule 73 (expression -> TRUE .)
    MINUS           reduce using rule 73 (expression -> TRUE .)
    MULTIPLY        reduce using rule 73 (expression -> TRUE .)
    DIVIDE          reduce using rule 73 (expression -> TRUE .)
    EQEQ            reduce using rule 73 (expression -> TRUE .)
    NEQ             reduce using rule 73 (expression -> TRUE .)
    LESS_THAN       reduce using rule 73 (expression -> TRUE .)
    GREATER_THAN    reduce using rule 73 (expression -> TRUE .)
    LTEQ            reduce using rule 73 (expression -> TRUE .)
    GTEQ            reduce using rule 73 (expression -> TRUE .)
    AND             reduce using rule 73 (expression -> TRUE .)
    OR              reduce using rule 73 (expression -> TRUE .)
    QMARK           reduce using rule 73 (expression -> TRUE .)
    RSQUAREBR       reduce using rule 73 (expression -> TRUE .)
    RPAREN          reduce using rule 73 (expression -> TRUE .)
    COMMA           reduce using rule 73 (expression -> TRUE .)
    COLON           reduce using rule 73 (expression -> TRUE .)
    TO              reduce using rule 73 (expression -> TRUE .)


state 79

    (74) expression -> FALSE .

    SEMI_COLON      reduce using rule 74 (expression -> FALSE .)
    PLUS            reduce using rule 74 (expression -> FALSE .)
    MINUS           reduce using rule 74 (expression -> FALSE .)
    MULTIPLY        reduce using rule 74 (expression -> FALSE .)
    DIVIDE          reduce using rule 74 (expression -> FALSE .)
    EQEQ            reduce using rule 74 (expression -> FALSE .)
    NEQ             reduce using rule 74 (expression -> FALSE .)
    LESS_THAN       reduce using rule 74 (expression -> FALSE .)
    GREATER_THAN    reduce using rule 74 (expression -> FALSE .)
    LTEQ            reduce using rule 74 (expression -> FALSE .)
    GTEQ            reduce using rule 74 (expression -> FALSE .)
    AND             reduce using rule 74 (expression -> FALSE .)
    OR              reduce using rule 74 (expression -> FALSE .)
    QMARK           reduce using rule 74 (expression -> FALSE .)
    RSQUAREBR       reduce using rule 74 (expression -> FALSE .)
    RPAREN          reduce using rule 74 (expression -> FALSE .)
    COMMA           reduce using rule 74 (expression -> FALSE .)
    COLON           reduce using rule 74 (expression -> FALSE .)
    TO              reduce using rule 74 (expression -> FALSE .)


state 80

    (75) expression -> ID .
    (34) array_access -> ID . LSQUAREBR expression RSQUAREBR
    (36) function_call -> ID . LPAREN arg_list RPAREN
    (37) function_call -> ID . LPAREN RPAREN

    SEMI_COLON      reduce using rule 75 (expression -> ID .)
    PLUS            reduce using rule 75 (expression -> ID .)
    MINUS           reduce using rule 75 (expression -> ID .)
    MULTIPLY        reduce using rule 75 (expression -> ID .)
    DIVIDE          reduce using rule 75 (expression -> ID .)
    EQEQ            reduce using rule 75 (expression -> ID .)
    NEQ             reduce using rule 75 (expression -> ID .)
    LESS_THAN       reduce using rule 75 (expression -> ID .)
    GREATER_THAN    reduce using rule 75 (expression -> ID .)
    LTEQ            reduce using rule 75 (expression -> ID .)
    GTEQ            reduce using rule 75 (expression -> ID .)
    AND             reduce using rule 75 (expression -> ID .)
    OR              reduce using rule 75 (expression -> ID .)
    QMARK           reduce using rule 75 (expression -> ID .)
    RSQUAREBR       reduce using rule 75 (expression -> ID .)
    RPAREN          reduce using rule 75 (expression -> ID .)
    COMMA           reduce using rule 75 (expression -> ID .)
    COLON           reduce using rule 75 (expression -> ID .)
    TO              reduce using rule 75 (expression -> ID .)
    LSQUAREBR       shift and go to state 62
    LPAREN          shift and go to state 63


state 81

    (76) expression -> array_access .

    SEMI_COLON      reduce using rule 76 (expression -> array_access .)
    PLUS            reduce using rule 76 (expression -> array_access .)
    MINUS           reduce using rule 76 (expression -> array_access .)
    MULTIPLY        reduce using rule 76 (expression -> array_access .)
    DIVIDE          reduce using rule 76 (expression -> array_access .)
    EQEQ            reduce using rule 76 (expression -> array_access .)
    NEQ             reduce using rule 76 (expression -> array_access .)
    LESS_THAN       reduce using rule 76 (expression -> array_access .)
    GREATER_THAN    reduce using rule 76 (expression -> array_access .)
    LTEQ            reduce using rule 76 (expression -> array_access .)
    GTEQ            reduce using rule 76 (expression -> array_access .)
    AND             reduce using rule 76 (expression -> array_access .)
    OR              reduce using rule 76 (expression -> array_access .)
    QMARK           reduce using rule 76 (expression -> array_access .)
    RSQUAREBR       reduce using rule 76 (expression -> array_access .)
    RPAREN          reduce using rule 76 (expression -> array_access .)
    COMMA           reduce using rule 76 (expression -> array_access .)
    COLON           reduce using rule 76 (expression -> array_access .)
    TO              reduce using rule 76 (expression -> array_access .)


state 82

    (77) expression -> function_call .

    SEMI_COLON      reduce using rule 77 (expression -> function_call .)
    PLUS            reduce using rule 77 (expression -> function_call .)
    MINUS           reduce using rule 77 (expression -> function_call .)
    MULTIPLY        reduce using rule 77 (expression -> function_call .)
    DIVIDE          reduce using rule 77 (expression -> function_call .)
    EQEQ            reduce using rule 77 (expression -> function_call .)
    NEQ             reduce using rule 77 (expression -> function_call .)
    LESS_THAN       reduce using rule 77 (expression -> function_call .)
    GREATER_THAN    reduce using rule 77 (expression -> function_call .)
    LTEQ            reduce using rule 77 (expression -> function_call .)
    GTEQ            reduce using rule 77 (expression -> function_call .)
    AND             reduce using rule 77 (expression -> function_call .)
    OR              reduce using rule 77 (expression -> function_call .)
    QMARK           reduce using rule 77 (expression -> function_call .)
    RSQUAREBR       reduce using rule 77 (expression -> function_call .)
    RPAREN          reduce using rule 77 (expression -> function_call .)
    COMMA           reduce using rule 77 (expression -> function_call .)
    COLON           reduce using rule 77 (expression -> function_call .)
    TO              reduce using rule 77 (expression -> function_call .)


state 83

    (45) if_stmt -> IF LSQUAREBR . LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> IF LSQUAREBR . LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement

    LSQUAREBR       shift and go to state 120


state 84

    (47) for_stmt -> FOR LPAREN . ID EQ expression TO expression RPAREN BEGIN stmt_list END

    ID              shift and go to state 121


state 85

    (50) block_stmt -> BEGIN stmt_list . END
    (17) stmt_list -> stmt_list . statement
    (20) statement -> . var_declaration
    (21) statement -> . assignment
    (22) statement -> . function_call_stmt
    (23) statement -> . return_stmt
    (24) statement -> . if_stmt
    (25) statement -> . for_stmt
    (26) statement -> . while_stmt
    (27) statement -> . do_while_stmt
    (28) statement -> . block_stmt
    (29) statement -> . function
    (30) var_declaration -> . ID DBL_COLON type SEMI_COLON
    (31) var_declaration -> . ID DBL_COLON type EQ expression SEMI_COLON
    (32) assignment -> . ID EQ expression SEMI_COLON
    (33) assignment -> . array_access EQ expression SEMI_COLON
    (35) function_call_stmt -> . function_call SEMI_COLON
    (43) return_stmt -> . RETURN expression SEMI_COLON
    (44) return_stmt -> . RETURN SEMI_COLON
    (45) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement
    (47) for_stmt -> . FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END
    (48) while_stmt -> . WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (49) do_while_stmt -> . DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
    (50) block_stmt -> . BEGIN stmt_list END
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    END             shift and go to state 122
    ID              shift and go to state 33
    RETURN          shift and go to state 49
    IF              shift and go to state 50
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    DO              shift and go to state 54
    BEGIN           shift and go to state 52
    FUNK            shift and go to state 4
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    statement                      shift and go to state 65
    var_declaration                shift and go to state 37
    assignment                     shift and go to state 38
    function_call_stmt             shift and go to state 39
    return_stmt                    shift and go to state 40
    if_stmt                        shift and go to state 41
    for_stmt                       shift and go to state 42
    while_stmt                     shift and go to state 43
    do_while_stmt                  shift and go to state 44
    block_stmt                     shift and go to state 45
    function                       shift and go to state 46
    array_access                   shift and go to state 47
    function_call                  shift and go to state 48

state 86

    (48) while_stmt -> WHILE LSQUAREBR . LSQUAREBR expression RSQUAREBR RSQUAREBR statement

    LSQUAREBR       shift and go to state 123


state 87

    (49) do_while_stmt -> DO statement . WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON

    WHILE           shift and go to state 124


state 88

    (38) function_call -> PRINT LPAREN . arg_list RPAREN
    (39) function_call -> PRINT LPAREN . RPAREN
    (41) arg_list -> . arg_list COMMA expression
    (42) arg_list -> . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    RPAREN          shift and go to state 126
    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    arg_list                       shift and go to state 125
    expression                     shift and go to state 98
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 89

    (40) function_call -> LEN LPAREN . expression RPAREN
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 127
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 90

    (7) function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression . SEMI_COLON
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      shift and go to state 128
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 91

    (4) function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .

    FUNK            reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    $end            reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    RCURLYEBR       reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    ID              reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    RETURN          reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    IF              reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    FOR             reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    WHILE           reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    DO              reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    BEGIN           reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    PRINT           reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    LEN             reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    END             reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)
    ELSE            reduce using rule 4 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR .)


state 92

    (6) function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression . SEMI_COLON
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      shift and go to state 129
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 93

    (30) var_declaration -> ID DBL_COLON type . SEMI_COLON
    (31) var_declaration -> ID DBL_COLON type . EQ expression SEMI_COLON

    SEMI_COLON      shift and go to state 130
    EQ              shift and go to state 131


state 94

    (32) assignment -> ID EQ expression . SEMI_COLON
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      shift and go to state 132
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 95

    (34) array_access -> ID LSQUAREBR expression . RSQUAREBR
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    RSQUAREBR       shift and go to state 133
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 96

    (36) function_call -> ID LPAREN arg_list . RPAREN
    (41) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 134
    COMMA           shift and go to state 135


state 97

    (37) function_call -> ID LPAREN RPAREN .

    SEMI_COLON      reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    MULTIPLY        reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    EQEQ            reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    NEQ             reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    LTEQ            reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    GTEQ            reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    QMARK           reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    RSQUAREBR       reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 37 (function_call -> ID LPAREN RPAREN .)
    TO              reduce using rule 37 (function_call -> ID LPAREN RPAREN .)


state 98

    (42) arg_list -> expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    RPAREN          reduce using rule 42 (arg_list -> expression .)
    COMMA           reduce using rule 42 (arg_list -> expression .)
    RSQUAREBR       reduce using rule 42 (arg_list -> expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 99

    (33) assignment -> array_access EQ expression . SEMI_COLON
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      shift and go to state 136
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 100

    (43) return_stmt -> RETURN expression SEMI_COLON .

    RCURLYEBR       reduce using rule 43 (return_stmt -> RETURN expression SEMI_COLON .)
    ID              reduce using rule 43 (return_stmt -> RETURN expression SEMI_COLON .)
    RETURN          reduce using rule 43 (return_stmt -> RETURN expression SEMI_COLON .)
    IF              reduce using rule 43 (return_stmt -> RETURN expression SEMI_COLON .)
    FOR             reduce using rule 43 (return_stmt -> RETURN expression SEMI_COLON .)
    WHILE           reduce using rule 43 (return_stmt -> RETURN expression SEMI_COLON .)
    DO              reduce using rule 43 (return_stmt -> RETURN expression SEMI_COLON .)
    BEGIN           reduce using rule 43 (return_stmt -> RETURN expression SEMI_COLON .)
    FUNK            reduce using rule 43 (return_stmt -> RETURN expression SEMI_COLON .)
    PRINT           reduce using rule 43 (return_stmt -> RETURN expression SEMI_COLON .)
    LEN             reduce using rule 43 (return_stmt -> RETURN expression SEMI_COLON .)
    END             reduce using rule 43 (return_stmt -> RETURN expression SEMI_COLON .)
    ELSE            reduce using rule 43 (return_stmt -> RETURN expression SEMI_COLON .)


state 101

    (51) expression -> expression PLUS . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 137
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 102

    (52) expression -> expression MINUS . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 138
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 103

    (53) expression -> expression MULTIPLY . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 139
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 104

    (54) expression -> expression DIVIDE . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 140
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 105

    (55) expression -> expression EQEQ . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 141
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 106

    (56) expression -> expression NEQ . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 142
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 107

    (57) expression -> expression LESS_THAN . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 143
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 108

    (58) expression -> expression GREATER_THAN . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 144
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 109

    (59) expression -> expression LTEQ . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 145
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 110

    (60) expression -> expression GTEQ . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 146
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 111

    (61) expression -> expression AND . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 147
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 112

    (62) expression -> expression OR . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 148
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 113

    (66) expression -> expression QMARK . expression COLON expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 149
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 114

    (65) expression -> PLUS expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 65 (expression -> PLUS expression .)
    PLUS            reduce using rule 65 (expression -> PLUS expression .)
    MINUS           reduce using rule 65 (expression -> PLUS expression .)
    MULTIPLY        reduce using rule 65 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 65 (expression -> PLUS expression .)
    EQEQ            reduce using rule 65 (expression -> PLUS expression .)
    NEQ             reduce using rule 65 (expression -> PLUS expression .)
    LESS_THAN       reduce using rule 65 (expression -> PLUS expression .)
    GREATER_THAN    reduce using rule 65 (expression -> PLUS expression .)
    LTEQ            reduce using rule 65 (expression -> PLUS expression .)
    GTEQ            reduce using rule 65 (expression -> PLUS expression .)
    AND             reduce using rule 65 (expression -> PLUS expression .)
    OR              reduce using rule 65 (expression -> PLUS expression .)
    RSQUAREBR       reduce using rule 65 (expression -> PLUS expression .)
    RPAREN          reduce using rule 65 (expression -> PLUS expression .)
    COMMA           reduce using rule 65 (expression -> PLUS expression .)
    COLON           reduce using rule 65 (expression -> PLUS expression .)
    TO              reduce using rule 65 (expression -> PLUS expression .)
    QMARK           shift and go to state 113

  ! QMARK           [ reduce using rule 65 (expression -> PLUS expression .) ]
  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 102 ]
  ! MULTIPLY        [ shift and go to state 103 ]
  ! DIVIDE          [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! LESS_THAN       [ shift and go to state 107 ]
  ! GREATER_THAN    [ shift and go to state 108 ]
  ! LTEQ            [ shift and go to state 109 ]
  ! GTEQ            [ shift and go to state 110 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 115

    (64) expression -> MINUS expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 64 (expression -> MINUS expression .)
    PLUS            reduce using rule 64 (expression -> MINUS expression .)
    MINUS           reduce using rule 64 (expression -> MINUS expression .)
    MULTIPLY        reduce using rule 64 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 64 (expression -> MINUS expression .)
    EQEQ            reduce using rule 64 (expression -> MINUS expression .)
    NEQ             reduce using rule 64 (expression -> MINUS expression .)
    LESS_THAN       reduce using rule 64 (expression -> MINUS expression .)
    GREATER_THAN    reduce using rule 64 (expression -> MINUS expression .)
    LTEQ            reduce using rule 64 (expression -> MINUS expression .)
    GTEQ            reduce using rule 64 (expression -> MINUS expression .)
    AND             reduce using rule 64 (expression -> MINUS expression .)
    OR              reduce using rule 64 (expression -> MINUS expression .)
    RSQUAREBR       reduce using rule 64 (expression -> MINUS expression .)
    RPAREN          reduce using rule 64 (expression -> MINUS expression .)
    COMMA           reduce using rule 64 (expression -> MINUS expression .)
    COLON           reduce using rule 64 (expression -> MINUS expression .)
    TO              reduce using rule 64 (expression -> MINUS expression .)
    QMARK           shift and go to state 113

  ! QMARK           [ reduce using rule 64 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 102 ]
  ! MULTIPLY        [ shift and go to state 103 ]
  ! DIVIDE          [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! LESS_THAN       [ shift and go to state 107 ]
  ! GREATER_THAN    [ shift and go to state 108 ]
  ! LTEQ            [ shift and go to state 109 ]
  ! GTEQ            [ shift and go to state 110 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 116

    (63) expression -> NOT expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 63 (expression -> NOT expression .)
    PLUS            reduce using rule 63 (expression -> NOT expression .)
    MINUS           reduce using rule 63 (expression -> NOT expression .)
    MULTIPLY        reduce using rule 63 (expression -> NOT expression .)
    DIVIDE          reduce using rule 63 (expression -> NOT expression .)
    EQEQ            reduce using rule 63 (expression -> NOT expression .)
    NEQ             reduce using rule 63 (expression -> NOT expression .)
    LESS_THAN       reduce using rule 63 (expression -> NOT expression .)
    GREATER_THAN    reduce using rule 63 (expression -> NOT expression .)
    LTEQ            reduce using rule 63 (expression -> NOT expression .)
    GTEQ            reduce using rule 63 (expression -> NOT expression .)
    AND             reduce using rule 63 (expression -> NOT expression .)
    OR              reduce using rule 63 (expression -> NOT expression .)
    RSQUAREBR       reduce using rule 63 (expression -> NOT expression .)
    RPAREN          reduce using rule 63 (expression -> NOT expression .)
    COMMA           reduce using rule 63 (expression -> NOT expression .)
    COLON           reduce using rule 63 (expression -> NOT expression .)
    TO              reduce using rule 63 (expression -> NOT expression .)
    QMARK           shift and go to state 113

  ! QMARK           [ reduce using rule 63 (expression -> NOT expression .) ]
  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 102 ]
  ! MULTIPLY        [ shift and go to state 103 ]
  ! DIVIDE          [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! LESS_THAN       [ shift and go to state 107 ]
  ! GREATER_THAN    [ shift and go to state 108 ]
  ! LTEQ            [ shift and go to state 109 ]
  ! GTEQ            [ shift and go to state 110 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 117

    (67) expression -> LPAREN expression . RPAREN
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    RPAREN          shift and go to state 150
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 118

    (68) expression -> LSQUAREBR arg_list . RSQUAREBR
    (41) arg_list -> arg_list . COMMA expression

    RSQUAREBR       shift and go to state 151
    COMMA           shift and go to state 135


state 119

    (69) expression -> LSQUAREBR RSQUAREBR .

    SEMI_COLON      reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    PLUS            reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    MINUS           reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    MULTIPLY        reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    DIVIDE          reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    EQEQ            reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    NEQ             reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    LESS_THAN       reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    GREATER_THAN    reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    LTEQ            reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    GTEQ            reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    AND             reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    OR              reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    QMARK           reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    RSQUAREBR       reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    RPAREN          reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    COMMA           reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    COLON           reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)
    TO              reduce using rule 69 (expression -> LSQUAREBR RSQUAREBR .)


state 120

    (45) if_stmt -> IF LSQUAREBR LSQUAREBR . expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> IF LSQUAREBR LSQUAREBR . expression RSQUAREBR RSQUAREBR statement ELSE statement
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 152
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 121

    (47) for_stmt -> FOR LPAREN ID . EQ expression TO expression RPAREN BEGIN stmt_list END

    EQ              shift and go to state 153


state 122

    (50) block_stmt -> BEGIN stmt_list END .

    RCURLYEBR       reduce using rule 50 (block_stmt -> BEGIN stmt_list END .)
    ID              reduce using rule 50 (block_stmt -> BEGIN stmt_list END .)
    RETURN          reduce using rule 50 (block_stmt -> BEGIN stmt_list END .)
    IF              reduce using rule 50 (block_stmt -> BEGIN stmt_list END .)
    FOR             reduce using rule 50 (block_stmt -> BEGIN stmt_list END .)
    WHILE           reduce using rule 50 (block_stmt -> BEGIN stmt_list END .)
    DO              reduce using rule 50 (block_stmt -> BEGIN stmt_list END .)
    BEGIN           reduce using rule 50 (block_stmt -> BEGIN stmt_list END .)
    FUNK            reduce using rule 50 (block_stmt -> BEGIN stmt_list END .)
    PRINT           reduce using rule 50 (block_stmt -> BEGIN stmt_list END .)
    LEN             reduce using rule 50 (block_stmt -> BEGIN stmt_list END .)
    END             reduce using rule 50 (block_stmt -> BEGIN stmt_list END .)
    ELSE            reduce using rule 50 (block_stmt -> BEGIN stmt_list END .)


state 123

    (48) while_stmt -> WHILE LSQUAREBR LSQUAREBR . expression RSQUAREBR RSQUAREBR statement
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 154
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 124

    (49) do_while_stmt -> DO statement WHILE . LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON

    LSQUAREBR       shift and go to state 155


state 125

    (38) function_call -> PRINT LPAREN arg_list . RPAREN
    (41) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 156
    COMMA           shift and go to state 135


state 126

    (39) function_call -> PRINT LPAREN RPAREN .

    SEMI_COLON      reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    PLUS            reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    MINUS           reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    MULTIPLY        reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    DIVIDE          reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    EQEQ            reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    NEQ             reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    LESS_THAN       reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    LTEQ            reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    GTEQ            reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    AND             reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    OR              reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    QMARK           reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    RSQUAREBR       reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    RPAREN          reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    COMMA           reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    COLON           reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)
    TO              reduce using rule 39 (function_call -> PRINT LPAREN RPAREN .)


state 127

    (40) function_call -> LEN LPAREN expression . RPAREN
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    RPAREN          shift and go to state 157
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 128

    (7) function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .

    FUNK            reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    $end            reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    RCURLYEBR       reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    ID              reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    RETURN          reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    IF              reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    FOR             reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    WHILE           reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    DO              reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    BEGIN           reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    PRINT           reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    LEN             reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    END             reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    ELSE            reduce using rule 7 (function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)


state 129

    (6) function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .

    FUNK            reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    $end            reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    RCURLYEBR       reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    ID              reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    RETURN          reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    IF              reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    FOR             reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    WHILE           reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    DO              reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    BEGIN           reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    PRINT           reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    LEN             reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    END             reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)
    ELSE            reduce using rule 6 (function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON .)


state 130

    (30) var_declaration -> ID DBL_COLON type SEMI_COLON .

    RCURLYEBR       reduce using rule 30 (var_declaration -> ID DBL_COLON type SEMI_COLON .)
    ID              reduce using rule 30 (var_declaration -> ID DBL_COLON type SEMI_COLON .)
    RETURN          reduce using rule 30 (var_declaration -> ID DBL_COLON type SEMI_COLON .)
    IF              reduce using rule 30 (var_declaration -> ID DBL_COLON type SEMI_COLON .)
    FOR             reduce using rule 30 (var_declaration -> ID DBL_COLON type SEMI_COLON .)
    WHILE           reduce using rule 30 (var_declaration -> ID DBL_COLON type SEMI_COLON .)
    DO              reduce using rule 30 (var_declaration -> ID DBL_COLON type SEMI_COLON .)
    BEGIN           reduce using rule 30 (var_declaration -> ID DBL_COLON type SEMI_COLON .)
    FUNK            reduce using rule 30 (var_declaration -> ID DBL_COLON type SEMI_COLON .)
    PRINT           reduce using rule 30 (var_declaration -> ID DBL_COLON type SEMI_COLON .)
    LEN             reduce using rule 30 (var_declaration -> ID DBL_COLON type SEMI_COLON .)
    END             reduce using rule 30 (var_declaration -> ID DBL_COLON type SEMI_COLON .)
    ELSE            reduce using rule 30 (var_declaration -> ID DBL_COLON type SEMI_COLON .)


state 131

    (31) var_declaration -> ID DBL_COLON type EQ . expression SEMI_COLON
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 158
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 132

    (32) assignment -> ID EQ expression SEMI_COLON .

    RCURLYEBR       reduce using rule 32 (assignment -> ID EQ expression SEMI_COLON .)
    ID              reduce using rule 32 (assignment -> ID EQ expression SEMI_COLON .)
    RETURN          reduce using rule 32 (assignment -> ID EQ expression SEMI_COLON .)
    IF              reduce using rule 32 (assignment -> ID EQ expression SEMI_COLON .)
    FOR             reduce using rule 32 (assignment -> ID EQ expression SEMI_COLON .)
    WHILE           reduce using rule 32 (assignment -> ID EQ expression SEMI_COLON .)
    DO              reduce using rule 32 (assignment -> ID EQ expression SEMI_COLON .)
    BEGIN           reduce using rule 32 (assignment -> ID EQ expression SEMI_COLON .)
    FUNK            reduce using rule 32 (assignment -> ID EQ expression SEMI_COLON .)
    PRINT           reduce using rule 32 (assignment -> ID EQ expression SEMI_COLON .)
    LEN             reduce using rule 32 (assignment -> ID EQ expression SEMI_COLON .)
    END             reduce using rule 32 (assignment -> ID EQ expression SEMI_COLON .)
    ELSE            reduce using rule 32 (assignment -> ID EQ expression SEMI_COLON .)


state 133

    (34) array_access -> ID LSQUAREBR expression RSQUAREBR .

    EQ              reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    SEMI_COLON      reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    PLUS            reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    MINUS           reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    MULTIPLY        reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    DIVIDE          reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    EQEQ            reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    NEQ             reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    LESS_THAN       reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    GREATER_THAN    reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    LTEQ            reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    GTEQ            reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    AND             reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    OR              reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    QMARK           reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    RSQUAREBR       reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    RPAREN          reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    COMMA           reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    COLON           reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)
    TO              reduce using rule 34 (array_access -> ID LSQUAREBR expression RSQUAREBR .)


state 134

    (36) function_call -> ID LPAREN arg_list RPAREN .

    SEMI_COLON      reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    MULTIPLY        reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    EQEQ            reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    LESS_THAN       reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    GREATER_THAN    reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    LTEQ            reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    GTEQ            reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    AND             reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    OR              reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    QMARK           reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    RSQUAREBR       reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    COLON           reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    TO              reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)


state 135

    (41) arg_list -> arg_list COMMA . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 159
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 136

    (33) assignment -> array_access EQ expression SEMI_COLON .

    RCURLYEBR       reduce using rule 33 (assignment -> array_access EQ expression SEMI_COLON .)
    ID              reduce using rule 33 (assignment -> array_access EQ expression SEMI_COLON .)
    RETURN          reduce using rule 33 (assignment -> array_access EQ expression SEMI_COLON .)
    IF              reduce using rule 33 (assignment -> array_access EQ expression SEMI_COLON .)
    FOR             reduce using rule 33 (assignment -> array_access EQ expression SEMI_COLON .)
    WHILE           reduce using rule 33 (assignment -> array_access EQ expression SEMI_COLON .)
    DO              reduce using rule 33 (assignment -> array_access EQ expression SEMI_COLON .)
    BEGIN           reduce using rule 33 (assignment -> array_access EQ expression SEMI_COLON .)
    FUNK            reduce using rule 33 (assignment -> array_access EQ expression SEMI_COLON .)
    PRINT           reduce using rule 33 (assignment -> array_access EQ expression SEMI_COLON .)
    LEN             reduce using rule 33 (assignment -> array_access EQ expression SEMI_COLON .)
    END             reduce using rule 33 (assignment -> array_access EQ expression SEMI_COLON .)
    ELSE            reduce using rule 33 (assignment -> array_access EQ expression SEMI_COLON .)


state 137

    (51) expression -> expression PLUS expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 51 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 51 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 51 (expression -> expression PLUS expression .)
    EQEQ            reduce using rule 51 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 51 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 51 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 51 (expression -> expression PLUS expression .)
    LTEQ            reduce using rule 51 (expression -> expression PLUS expression .)
    GTEQ            reduce using rule 51 (expression -> expression PLUS expression .)
    AND             reduce using rule 51 (expression -> expression PLUS expression .)
    OR              reduce using rule 51 (expression -> expression PLUS expression .)
    RSQUAREBR       reduce using rule 51 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 51 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 51 (expression -> expression PLUS expression .)
    COLON           reduce using rule 51 (expression -> expression PLUS expression .)
    TO              reduce using rule 51 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    QMARK           shift and go to state 113

  ! MULTIPLY        [ reduce using rule 51 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression PLUS expression .) ]
  ! QMARK           [ reduce using rule 51 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 102 ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! LESS_THAN       [ shift and go to state 107 ]
  ! GREATER_THAN    [ shift and go to state 108 ]
  ! LTEQ            [ shift and go to state 109 ]
  ! GTEQ            [ shift and go to state 110 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 138

    (52) expression -> expression MINUS expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 52 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 52 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 52 (expression -> expression MINUS expression .)
    EQEQ            reduce using rule 52 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 52 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 52 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 52 (expression -> expression MINUS expression .)
    LTEQ            reduce using rule 52 (expression -> expression MINUS expression .)
    GTEQ            reduce using rule 52 (expression -> expression MINUS expression .)
    AND             reduce using rule 52 (expression -> expression MINUS expression .)
    OR              reduce using rule 52 (expression -> expression MINUS expression .)
    RSQUAREBR       reduce using rule 52 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 52 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 52 (expression -> expression MINUS expression .)
    COLON           reduce using rule 52 (expression -> expression MINUS expression .)
    TO              reduce using rule 52 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    QMARK           shift and go to state 113

  ! MULTIPLY        [ reduce using rule 52 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression MINUS expression .) ]
  ! QMARK           [ reduce using rule 52 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 102 ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! LESS_THAN       [ shift and go to state 107 ]
  ! GREATER_THAN    [ shift and go to state 108 ]
  ! LTEQ            [ shift and go to state 109 ]
  ! GTEQ            [ shift and go to state 110 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 139

    (53) expression -> expression MULTIPLY expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 53 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 53 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 53 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 53 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 53 (expression -> expression MULTIPLY expression .)
    EQEQ            reduce using rule 53 (expression -> expression MULTIPLY expression .)
    NEQ             reduce using rule 53 (expression -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 53 (expression -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 53 (expression -> expression MULTIPLY expression .)
    LTEQ            reduce using rule 53 (expression -> expression MULTIPLY expression .)
    GTEQ            reduce using rule 53 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 53 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 53 (expression -> expression MULTIPLY expression .)
    RSQUAREBR       reduce using rule 53 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 53 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 53 (expression -> expression MULTIPLY expression .)
    COLON           reduce using rule 53 (expression -> expression MULTIPLY expression .)
    TO              reduce using rule 53 (expression -> expression MULTIPLY expression .)
    QMARK           shift and go to state 113

  ! QMARK           [ reduce using rule 53 (expression -> expression MULTIPLY expression .) ]
  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 102 ]
  ! MULTIPLY        [ shift and go to state 103 ]
  ! DIVIDE          [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! LESS_THAN       [ shift and go to state 107 ]
  ! GREATER_THAN    [ shift and go to state 108 ]
  ! LTEQ            [ shift and go to state 109 ]
  ! GTEQ            [ shift and go to state 110 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 140

    (54) expression -> expression DIVIDE expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 54 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 54 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 54 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 54 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 54 (expression -> expression DIVIDE expression .)
    EQEQ            reduce using rule 54 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 54 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 54 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 54 (expression -> expression DIVIDE expression .)
    LTEQ            reduce using rule 54 (expression -> expression DIVIDE expression .)
    GTEQ            reduce using rule 54 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 54 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 54 (expression -> expression DIVIDE expression .)
    RSQUAREBR       reduce using rule 54 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 54 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 54 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 54 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 54 (expression -> expression DIVIDE expression .)
    QMARK           shift and go to state 113

  ! QMARK           [ reduce using rule 54 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 102 ]
  ! MULTIPLY        [ shift and go to state 103 ]
  ! DIVIDE          [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! LESS_THAN       [ shift and go to state 107 ]
  ! GREATER_THAN    [ shift and go to state 108 ]
  ! LTEQ            [ shift and go to state 109 ]
  ! GTEQ            [ shift and go to state 110 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 141

    (55) expression -> expression EQEQ expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 55 (expression -> expression EQEQ expression .)
    EQEQ            reduce using rule 55 (expression -> expression EQEQ expression .)
    NEQ             reduce using rule 55 (expression -> expression EQEQ expression .)
    AND             reduce using rule 55 (expression -> expression EQEQ expression .)
    OR              reduce using rule 55 (expression -> expression EQEQ expression .)
    RSQUAREBR       reduce using rule 55 (expression -> expression EQEQ expression .)
    RPAREN          reduce using rule 55 (expression -> expression EQEQ expression .)
    COMMA           reduce using rule 55 (expression -> expression EQEQ expression .)
    COLON           reduce using rule 55 (expression -> expression EQEQ expression .)
    TO              reduce using rule 55 (expression -> expression EQEQ expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    QMARK           shift and go to state 113

  ! PLUS            [ reduce using rule 55 (expression -> expression EQEQ expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression EQEQ expression .) ]
  ! MULTIPLY        [ reduce using rule 55 (expression -> expression EQEQ expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression EQEQ expression .) ]
  ! LESS_THAN       [ reduce using rule 55 (expression -> expression EQEQ expression .) ]
  ! GREATER_THAN    [ reduce using rule 55 (expression -> expression EQEQ expression .) ]
  ! LTEQ            [ reduce using rule 55 (expression -> expression EQEQ expression .) ]
  ! GTEQ            [ reduce using rule 55 (expression -> expression EQEQ expression .) ]
  ! QMARK           [ reduce using rule 55 (expression -> expression EQEQ expression .) ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 142

    (56) expression -> expression NEQ expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 56 (expression -> expression NEQ expression .)
    EQEQ            reduce using rule 56 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 56 (expression -> expression NEQ expression .)
    AND             reduce using rule 56 (expression -> expression NEQ expression .)
    OR              reduce using rule 56 (expression -> expression NEQ expression .)
    RSQUAREBR       reduce using rule 56 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 56 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 56 (expression -> expression NEQ expression .)
    COLON           reduce using rule 56 (expression -> expression NEQ expression .)
    TO              reduce using rule 56 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    QMARK           shift and go to state 113

  ! PLUS            [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! MULTIPLY        [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! LESS_THAN       [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! GREATER_THAN    [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! LTEQ            [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! GTEQ            [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! QMARK           [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 143

    (57) expression -> expression LESS_THAN expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 57 (expression -> expression LESS_THAN expression .)
    EQEQ            reduce using rule 57 (expression -> expression LESS_THAN expression .)
    NEQ             reduce using rule 57 (expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 57 (expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 57 (expression -> expression LESS_THAN expression .)
    LTEQ            reduce using rule 57 (expression -> expression LESS_THAN expression .)
    GTEQ            reduce using rule 57 (expression -> expression LESS_THAN expression .)
    AND             reduce using rule 57 (expression -> expression LESS_THAN expression .)
    OR              reduce using rule 57 (expression -> expression LESS_THAN expression .)
    RSQUAREBR       reduce using rule 57 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 57 (expression -> expression LESS_THAN expression .)
    COMMA           reduce using rule 57 (expression -> expression LESS_THAN expression .)
    COLON           reduce using rule 57 (expression -> expression LESS_THAN expression .)
    TO              reduce using rule 57 (expression -> expression LESS_THAN expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    QMARK           shift and go to state 113

  ! PLUS            [ reduce using rule 57 (expression -> expression LESS_THAN expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression LESS_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 57 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression LESS_THAN expression .) ]
  ! QMARK           [ reduce using rule 57 (expression -> expression LESS_THAN expression .) ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! LESS_THAN       [ shift and go to state 107 ]
  ! GREATER_THAN    [ shift and go to state 108 ]
  ! LTEQ            [ shift and go to state 109 ]
  ! GTEQ            [ shift and go to state 110 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 144

    (58) expression -> expression GREATER_THAN expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    EQEQ            reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    NEQ             reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    LTEQ            reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    GTEQ            reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    AND             reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    OR              reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    RSQUAREBR       reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    COMMA           reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    COLON           reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    TO              reduce using rule 58 (expression -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    QMARK           shift and go to state 113

  ! PLUS            [ reduce using rule 58 (expression -> expression GREATER_THAN expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression GREATER_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 58 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> expression GREATER_THAN expression .) ]
  ! QMARK           [ reduce using rule 58 (expression -> expression GREATER_THAN expression .) ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! LESS_THAN       [ shift and go to state 107 ]
  ! GREATER_THAN    [ shift and go to state 108 ]
  ! LTEQ            [ shift and go to state 109 ]
  ! GTEQ            [ shift and go to state 110 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 145

    (59) expression -> expression LTEQ expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 59 (expression -> expression LTEQ expression .)
    EQEQ            reduce using rule 59 (expression -> expression LTEQ expression .)
    NEQ             reduce using rule 59 (expression -> expression LTEQ expression .)
    LESS_THAN       reduce using rule 59 (expression -> expression LTEQ expression .)
    GREATER_THAN    reduce using rule 59 (expression -> expression LTEQ expression .)
    LTEQ            reduce using rule 59 (expression -> expression LTEQ expression .)
    GTEQ            reduce using rule 59 (expression -> expression LTEQ expression .)
    AND             reduce using rule 59 (expression -> expression LTEQ expression .)
    OR              reduce using rule 59 (expression -> expression LTEQ expression .)
    RSQUAREBR       reduce using rule 59 (expression -> expression LTEQ expression .)
    RPAREN          reduce using rule 59 (expression -> expression LTEQ expression .)
    COMMA           reduce using rule 59 (expression -> expression LTEQ expression .)
    COLON           reduce using rule 59 (expression -> expression LTEQ expression .)
    TO              reduce using rule 59 (expression -> expression LTEQ expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    QMARK           shift and go to state 113

  ! PLUS            [ reduce using rule 59 (expression -> expression LTEQ expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression LTEQ expression .) ]
  ! MULTIPLY        [ reduce using rule 59 (expression -> expression LTEQ expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression LTEQ expression .) ]
  ! QMARK           [ reduce using rule 59 (expression -> expression LTEQ expression .) ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! LESS_THAN       [ shift and go to state 107 ]
  ! GREATER_THAN    [ shift and go to state 108 ]
  ! LTEQ            [ shift and go to state 109 ]
  ! GTEQ            [ shift and go to state 110 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 146

    (60) expression -> expression GTEQ expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 60 (expression -> expression GTEQ expression .)
    EQEQ            reduce using rule 60 (expression -> expression GTEQ expression .)
    NEQ             reduce using rule 60 (expression -> expression GTEQ expression .)
    LESS_THAN       reduce using rule 60 (expression -> expression GTEQ expression .)
    GREATER_THAN    reduce using rule 60 (expression -> expression GTEQ expression .)
    LTEQ            reduce using rule 60 (expression -> expression GTEQ expression .)
    GTEQ            reduce using rule 60 (expression -> expression GTEQ expression .)
    AND             reduce using rule 60 (expression -> expression GTEQ expression .)
    OR              reduce using rule 60 (expression -> expression GTEQ expression .)
    RSQUAREBR       reduce using rule 60 (expression -> expression GTEQ expression .)
    RPAREN          reduce using rule 60 (expression -> expression GTEQ expression .)
    COMMA           reduce using rule 60 (expression -> expression GTEQ expression .)
    COLON           reduce using rule 60 (expression -> expression GTEQ expression .)
    TO              reduce using rule 60 (expression -> expression GTEQ expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    QMARK           shift and go to state 113

  ! PLUS            [ reduce using rule 60 (expression -> expression GTEQ expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression GTEQ expression .) ]
  ! MULTIPLY        [ reduce using rule 60 (expression -> expression GTEQ expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression GTEQ expression .) ]
  ! QMARK           [ reduce using rule 60 (expression -> expression GTEQ expression .) ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! LESS_THAN       [ shift and go to state 107 ]
  ! GREATER_THAN    [ shift and go to state 108 ]
  ! LTEQ            [ shift and go to state 109 ]
  ! GTEQ            [ shift and go to state 110 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 147

    (61) expression -> expression AND expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 61 (expression -> expression AND expression .)
    AND             reduce using rule 61 (expression -> expression AND expression .)
    OR              reduce using rule 61 (expression -> expression AND expression .)
    RSQUAREBR       reduce using rule 61 (expression -> expression AND expression .)
    RPAREN          reduce using rule 61 (expression -> expression AND expression .)
    COMMA           reduce using rule 61 (expression -> expression AND expression .)
    COLON           reduce using rule 61 (expression -> expression AND expression .)
    TO              reduce using rule 61 (expression -> expression AND expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    QMARK           shift and go to state 113

  ! PLUS            [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! EQEQ            [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! LESS_THAN       [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! LTEQ            [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! GTEQ            [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! QMARK           [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 148

    (62) expression -> expression OR expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 62 (expression -> expression OR expression .)
    OR              reduce using rule 62 (expression -> expression OR expression .)
    RSQUAREBR       reduce using rule 62 (expression -> expression OR expression .)
    RPAREN          reduce using rule 62 (expression -> expression OR expression .)
    COMMA           reduce using rule 62 (expression -> expression OR expression .)
    COLON           reduce using rule 62 (expression -> expression OR expression .)
    TO              reduce using rule 62 (expression -> expression OR expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    QMARK           shift and go to state 113

  ! PLUS            [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! EQEQ            [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! LESS_THAN       [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! LTEQ            [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! GTEQ            [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! QMARK           [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 112 ]


state 149

    (66) expression -> expression QMARK expression . COLON expression
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    COLON           shift and go to state 160
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 150

    (67) expression -> LPAREN expression RPAREN .

    SEMI_COLON      reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    EQEQ            reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    LTEQ            reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    GTEQ            reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    QMARK           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    RSQUAREBR       reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 67 (expression -> LPAREN expression RPAREN .)


state 151

    (68) expression -> LSQUAREBR arg_list RSQUAREBR .

    SEMI_COLON      reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    PLUS            reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    MINUS           reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    MULTIPLY        reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    DIVIDE          reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    EQEQ            reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    NEQ             reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    LESS_THAN       reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    GREATER_THAN    reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    LTEQ            reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    GTEQ            reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    AND             reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    OR              reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    QMARK           reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    RSQUAREBR       reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    RPAREN          reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    COMMA           reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    COLON           reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)
    TO              reduce using rule 68 (expression -> LSQUAREBR arg_list RSQUAREBR .)


state 152

    (45) if_stmt -> IF LSQUAREBR LSQUAREBR expression . RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> IF LSQUAREBR LSQUAREBR expression . RSQUAREBR RSQUAREBR statement ELSE statement
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    RSQUAREBR       shift and go to state 161
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 153

    (47) for_stmt -> FOR LPAREN ID EQ . expression TO expression RPAREN BEGIN stmt_list END
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 162
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 154

    (48) while_stmt -> WHILE LSQUAREBR LSQUAREBR expression . RSQUAREBR RSQUAREBR statement
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    RSQUAREBR       shift and go to state 163
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 155

    (49) do_while_stmt -> DO statement WHILE LSQUAREBR . LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON

    LSQUAREBR       shift and go to state 164


state 156

    (38) function_call -> PRINT LPAREN arg_list RPAREN .

    SEMI_COLON      reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    MULTIPLY        reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    EQEQ            reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    LESS_THAN       reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    GREATER_THAN    reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    LTEQ            reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    GTEQ            reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    AND             reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    OR              reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    QMARK           reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    RSQUAREBR       reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    COLON           reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)
    TO              reduce using rule 38 (function_call -> PRINT LPAREN arg_list RPAREN .)


state 157

    (40) function_call -> LEN LPAREN expression RPAREN .

    SEMI_COLON      reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    PLUS            reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    MINUS           reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    EQEQ            reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    NEQ             reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    LTEQ            reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    GTEQ            reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    AND             reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    OR              reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    QMARK           reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    RSQUAREBR       reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    RPAREN          reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    COMMA           reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    COLON           reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)
    TO              reduce using rule 40 (function_call -> LEN LPAREN expression RPAREN .)


state 158

    (31) var_declaration -> ID DBL_COLON type EQ expression . SEMI_COLON
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      shift and go to state 165
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 159

    (41) arg_list -> arg_list COMMA expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    RPAREN          reduce using rule 41 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 41 (arg_list -> arg_list COMMA expression .)
    RSQUAREBR       reduce using rule 41 (arg_list -> arg_list COMMA expression .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 160

    (66) expression -> expression QMARK expression COLON . expression
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 166
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 161

    (45) if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR . RSQUAREBR statement
    (46) if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR . RSQUAREBR statement ELSE statement

    RSQUAREBR       shift and go to state 167


state 162

    (47) for_stmt -> FOR LPAREN ID EQ expression . TO expression RPAREN BEGIN stmt_list END
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    TO              shift and go to state 168
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 163

    (48) while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR . RSQUAREBR statement

    RSQUAREBR       shift and go to state 169


state 164

    (49) do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR . expression RSQUAREBR RSQUAREBR SEMI_COLON
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 170
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 165

    (31) var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .

    RCURLYEBR       reduce using rule 31 (var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .)
    ID              reduce using rule 31 (var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .)
    RETURN          reduce using rule 31 (var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .)
    IF              reduce using rule 31 (var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .)
    FOR             reduce using rule 31 (var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .)
    WHILE           reduce using rule 31 (var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .)
    DO              reduce using rule 31 (var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .)
    BEGIN           reduce using rule 31 (var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .)
    FUNK            reduce using rule 31 (var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .)
    PRINT           reduce using rule 31 (var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .)
    LEN             reduce using rule 31 (var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .)
    END             reduce using rule 31 (var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .)
    ELSE            reduce using rule 31 (var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON .)


state 166

    (66) expression -> expression QMARK expression COLON expression .
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    SEMI_COLON      reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    PLUS            reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    MINUS           reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    MULTIPLY        reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    DIVIDE          reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    EQEQ            reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    NEQ             reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    LESS_THAN       reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    GREATER_THAN    reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    LTEQ            reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    GTEQ            reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    AND             reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    OR              reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    RSQUAREBR       reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    RPAREN          reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    COMMA           reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    COLON           reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    TO              reduce using rule 66 (expression -> expression QMARK expression COLON expression .)
    QMARK           shift and go to state 113

  ! QMARK           [ reduce using rule 66 (expression -> expression QMARK expression COLON expression .) ]
  ! PLUS            [ shift and go to state 101 ]
  ! MINUS           [ shift and go to state 102 ]
  ! MULTIPLY        [ shift and go to state 103 ]
  ! DIVIDE          [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 105 ]
  ! NEQ             [ shift and go to state 106 ]
  ! LESS_THAN       [ shift and go to state 107 ]
  ! GREATER_THAN    [ shift and go to state 108 ]
  ! LTEQ            [ shift and go to state 109 ]
  ! GTEQ            [ shift and go to state 110 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 167

    (45) if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR . statement
    (46) if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR . statement ELSE statement
    (20) statement -> . var_declaration
    (21) statement -> . assignment
    (22) statement -> . function_call_stmt
    (23) statement -> . return_stmt
    (24) statement -> . if_stmt
    (25) statement -> . for_stmt
    (26) statement -> . while_stmt
    (27) statement -> . do_while_stmt
    (28) statement -> . block_stmt
    (29) statement -> . function
    (30) var_declaration -> . ID DBL_COLON type SEMI_COLON
    (31) var_declaration -> . ID DBL_COLON type EQ expression SEMI_COLON
    (32) assignment -> . ID EQ expression SEMI_COLON
    (33) assignment -> . array_access EQ expression SEMI_COLON
    (35) function_call_stmt -> . function_call SEMI_COLON
    (43) return_stmt -> . RETURN expression SEMI_COLON
    (44) return_stmt -> . RETURN SEMI_COLON
    (45) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement
    (47) for_stmt -> . FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END
    (48) while_stmt -> . WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (49) do_while_stmt -> . DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
    (50) block_stmt -> . BEGIN stmt_list END
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    ID              shift and go to state 33
    RETURN          shift and go to state 49
    IF              shift and go to state 50
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    DO              shift and go to state 54
    BEGIN           shift and go to state 52
    FUNK            shift and go to state 4
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    statement                      shift and go to state 171
    var_declaration                shift and go to state 37
    assignment                     shift and go to state 38
    function_call_stmt             shift and go to state 39
    return_stmt                    shift and go to state 40
    if_stmt                        shift and go to state 41
    for_stmt                       shift and go to state 42
    while_stmt                     shift and go to state 43
    do_while_stmt                  shift and go to state 44
    block_stmt                     shift and go to state 45
    function                       shift and go to state 46
    array_access                   shift and go to state 47
    function_call                  shift and go to state 48

state 168

    (47) for_stmt -> FOR LPAREN ID EQ expression TO . expression RPAREN BEGIN stmt_list END
    (51) expression -> . expression PLUS expression
    (52) expression -> . expression MINUS expression
    (53) expression -> . expression MULTIPLY expression
    (54) expression -> . expression DIVIDE expression
    (55) expression -> . expression EQEQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . expression LESS_THAN expression
    (58) expression -> . expression GREATER_THAN expression
    (59) expression -> . expression LTEQ expression
    (60) expression -> . expression GTEQ expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . expression QMARK expression COLON expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . LSQUAREBR arg_list RSQUAREBR
    (69) expression -> . LSQUAREBR RSQUAREBR
    (70) expression -> . NUMBER
    (71) expression -> . STRING
    (72) expression -> . MSTRING
    (73) expression -> . TRUE
    (74) expression -> . FALSE
    (75) expression -> . ID
    (76) expression -> . array_access
    (77) expression -> . function_call
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    NOT             shift and go to state 72
    MINUS           shift and go to state 71
    PLUS            shift and go to state 70
    LPAREN          shift and go to state 73
    LSQUAREBR       shift and go to state 74
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    MSTRING         shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID              shift and go to state 80
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    expression                     shift and go to state 172
    array_access                   shift and go to state 81
    function_call                  shift and go to state 82

state 169

    (48) while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR . statement
    (20) statement -> . var_declaration
    (21) statement -> . assignment
    (22) statement -> . function_call_stmt
    (23) statement -> . return_stmt
    (24) statement -> . if_stmt
    (25) statement -> . for_stmt
    (26) statement -> . while_stmt
    (27) statement -> . do_while_stmt
    (28) statement -> . block_stmt
    (29) statement -> . function
    (30) var_declaration -> . ID DBL_COLON type SEMI_COLON
    (31) var_declaration -> . ID DBL_COLON type EQ expression SEMI_COLON
    (32) assignment -> . ID EQ expression SEMI_COLON
    (33) assignment -> . array_access EQ expression SEMI_COLON
    (35) function_call_stmt -> . function_call SEMI_COLON
    (43) return_stmt -> . RETURN expression SEMI_COLON
    (44) return_stmt -> . RETURN SEMI_COLON
    (45) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement
    (47) for_stmt -> . FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END
    (48) while_stmt -> . WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (49) do_while_stmt -> . DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
    (50) block_stmt -> . BEGIN stmt_list END
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    ID              shift and go to state 33
    RETURN          shift and go to state 49
    IF              shift and go to state 50
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    DO              shift and go to state 54
    BEGIN           shift and go to state 52
    FUNK            shift and go to state 4
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    statement                      shift and go to state 173
    var_declaration                shift and go to state 37
    assignment                     shift and go to state 38
    function_call_stmt             shift and go to state 39
    return_stmt                    shift and go to state 40
    if_stmt                        shift and go to state 41
    for_stmt                       shift and go to state 42
    while_stmt                     shift and go to state 43
    do_while_stmt                  shift and go to state 44
    block_stmt                     shift and go to state 45
    function                       shift and go to state 46
    array_access                   shift and go to state 47
    function_call                  shift and go to state 48

state 170

    (49) do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression . RSQUAREBR RSQUAREBR SEMI_COLON
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    RSQUAREBR       shift and go to state 174
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 171

    (45) if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .
    (46) if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RCURLYEBR       reduce using rule 45 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    ID              reduce using rule 45 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    RETURN          reduce using rule 45 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    IF              reduce using rule 45 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    FOR             reduce using rule 45 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    WHILE           reduce using rule 45 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    DO              reduce using rule 45 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    BEGIN           reduce using rule 45 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    FUNK            reduce using rule 45 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    PRINT           reduce using rule 45 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    LEN             reduce using rule 45 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    END             reduce using rule 45 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    ELSE            shift and go to state 175

  ! ELSE            [ reduce using rule 45 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .) ]


state 172

    (47) for_stmt -> FOR LPAREN ID EQ expression TO expression . RPAREN BEGIN stmt_list END
    (51) expression -> expression . PLUS expression
    (52) expression -> expression . MINUS expression
    (53) expression -> expression . MULTIPLY expression
    (54) expression -> expression . DIVIDE expression
    (55) expression -> expression . EQEQ expression
    (56) expression -> expression . NEQ expression
    (57) expression -> expression . LESS_THAN expression
    (58) expression -> expression . GREATER_THAN expression
    (59) expression -> expression . LTEQ expression
    (60) expression -> expression . GTEQ expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (66) expression -> expression . QMARK expression COLON expression

    RPAREN          shift and go to state 176
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104
    EQEQ            shift and go to state 105
    NEQ             shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108
    LTEQ            shift and go to state 109
    GTEQ            shift and go to state 110
    AND             shift and go to state 111
    OR              shift and go to state 112
    QMARK           shift and go to state 113


state 173

    (48) while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .

    RCURLYEBR       reduce using rule 48 (while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    ID              reduce using rule 48 (while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    RETURN          reduce using rule 48 (while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    IF              reduce using rule 48 (while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    FOR             reduce using rule 48 (while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    WHILE           reduce using rule 48 (while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    DO              reduce using rule 48 (while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    BEGIN           reduce using rule 48 (while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    FUNK            reduce using rule 48 (while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    PRINT           reduce using rule 48 (while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    LEN             reduce using rule 48 (while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    END             reduce using rule 48 (while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)
    ELSE            reduce using rule 48 (while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement .)


state 174

    (49) do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR . RSQUAREBR SEMI_COLON

    RSQUAREBR       shift and go to state 177


state 175

    (46) if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE . statement
    (20) statement -> . var_declaration
    (21) statement -> . assignment
    (22) statement -> . function_call_stmt
    (23) statement -> . return_stmt
    (24) statement -> . if_stmt
    (25) statement -> . for_stmt
    (26) statement -> . while_stmt
    (27) statement -> . do_while_stmt
    (28) statement -> . block_stmt
    (29) statement -> . function
    (30) var_declaration -> . ID DBL_COLON type SEMI_COLON
    (31) var_declaration -> . ID DBL_COLON type EQ expression SEMI_COLON
    (32) assignment -> . ID EQ expression SEMI_COLON
    (33) assignment -> . array_access EQ expression SEMI_COLON
    (35) function_call_stmt -> . function_call SEMI_COLON
    (43) return_stmt -> . RETURN expression SEMI_COLON
    (44) return_stmt -> . RETURN SEMI_COLON
    (45) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement
    (47) for_stmt -> . FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END
    (48) while_stmt -> . WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (49) do_while_stmt -> . DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
    (50) block_stmt -> . BEGIN stmt_list END
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    ID              shift and go to state 33
    RETURN          shift and go to state 49
    IF              shift and go to state 50
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    DO              shift and go to state 54
    BEGIN           shift and go to state 52
    FUNK            shift and go to state 4
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    statement                      shift and go to state 178
    var_declaration                shift and go to state 37
    assignment                     shift and go to state 38
    function_call_stmt             shift and go to state 39
    return_stmt                    shift and go to state 40
    if_stmt                        shift and go to state 41
    for_stmt                       shift and go to state 42
    while_stmt                     shift and go to state 43
    do_while_stmt                  shift and go to state 44
    block_stmt                     shift and go to state 45
    function                       shift and go to state 46
    array_access                   shift and go to state 47
    function_call                  shift and go to state 48

state 176

    (47) for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN . BEGIN stmt_list END

    BEGIN           shift and go to state 179


state 177

    (49) do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR . SEMI_COLON

    SEMI_COLON      shift and go to state 180


state 178

    (46) if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .

    RCURLYEBR       reduce using rule 46 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .)
    ID              reduce using rule 46 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .)
    RETURN          reduce using rule 46 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .)
    IF              reduce using rule 46 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .)
    FOR             reduce using rule 46 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .)
    WHILE           reduce using rule 46 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .)
    DO              reduce using rule 46 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .)
    BEGIN           reduce using rule 46 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .)
    FUNK            reduce using rule 46 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .)
    PRINT           reduce using rule 46 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .)
    LEN             reduce using rule 46 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .)
    END             reduce using rule 46 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .)
    ELSE            reduce using rule 46 (if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement .)


state 179

    (47) for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN . stmt_list END
    (17) stmt_list -> . stmt_list statement
    (18) stmt_list -> . statement
    (19) stmt_list -> . empty
    (20) statement -> . var_declaration
    (21) statement -> . assignment
    (22) statement -> . function_call_stmt
    (23) statement -> . return_stmt
    (24) statement -> . if_stmt
    (25) statement -> . for_stmt
    (26) statement -> . while_stmt
    (27) statement -> . do_while_stmt
    (28) statement -> . block_stmt
    (29) statement -> . function
    (78) empty -> .
    (30) var_declaration -> . ID DBL_COLON type SEMI_COLON
    (31) var_declaration -> . ID DBL_COLON type EQ expression SEMI_COLON
    (32) assignment -> . ID EQ expression SEMI_COLON
    (33) assignment -> . array_access EQ expression SEMI_COLON
    (35) function_call_stmt -> . function_call SEMI_COLON
    (43) return_stmt -> . RETURN expression SEMI_COLON
    (44) return_stmt -> . RETURN SEMI_COLON
    (45) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement
    (47) for_stmt -> . FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END
    (48) while_stmt -> . WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (49) do_while_stmt -> . DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
    (50) block_stmt -> . BEGIN stmt_list END
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FUNK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for LEN resolved as shift
    END             reduce using rule 78 (empty -> .)
    ID              shift and go to state 33
    RETURN          shift and go to state 49
    IF              shift and go to state 50
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    DO              shift and go to state 54
    BEGIN           shift and go to state 52
    FUNK            shift and go to state 4
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

  ! ID              [ reduce using rule 78 (empty -> .) ]
  ! RETURN          [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! DO              [ reduce using rule 78 (empty -> .) ]
  ! BEGIN           [ reduce using rule 78 (empty -> .) ]
  ! FUNK            [ reduce using rule 78 (empty -> .) ]
  ! PRINT           [ reduce using rule 78 (empty -> .) ]
  ! LEN             [ reduce using rule 78 (empty -> .) ]

    stmt_list                      shift and go to state 181
    statement                      shift and go to state 35
    empty                          shift and go to state 36
    var_declaration                shift and go to state 37
    assignment                     shift and go to state 38
    function_call_stmt             shift and go to state 39
    return_stmt                    shift and go to state 40
    if_stmt                        shift and go to state 41
    for_stmt                       shift and go to state 42
    while_stmt                     shift and go to state 43
    do_while_stmt                  shift and go to state 44
    block_stmt                     shift and go to state 45
    function                       shift and go to state 46
    array_access                   shift and go to state 47
    function_call                  shift and go to state 48

state 180

    (49) do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .

    RCURLYEBR       reduce using rule 49 (do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .)
    ID              reduce using rule 49 (do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .)
    RETURN          reduce using rule 49 (do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .)
    IF              reduce using rule 49 (do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .)
    FOR             reduce using rule 49 (do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .)
    WHILE           reduce using rule 49 (do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .)
    DO              reduce using rule 49 (do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .)
    BEGIN           reduce using rule 49 (do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .)
    FUNK            reduce using rule 49 (do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .)
    PRINT           reduce using rule 49 (do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .)
    LEN             reduce using rule 49 (do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .)
    END             reduce using rule 49 (do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .)
    ELSE            reduce using rule 49 (do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON .)


state 181

    (47) for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list . END
    (17) stmt_list -> stmt_list . statement
    (20) statement -> . var_declaration
    (21) statement -> . assignment
    (22) statement -> . function_call_stmt
    (23) statement -> . return_stmt
    (24) statement -> . if_stmt
    (25) statement -> . for_stmt
    (26) statement -> . while_stmt
    (27) statement -> . do_while_stmt
    (28) statement -> . block_stmt
    (29) statement -> . function
    (30) var_declaration -> . ID DBL_COLON type SEMI_COLON
    (31) var_declaration -> . ID DBL_COLON type EQ expression SEMI_COLON
    (32) assignment -> . ID EQ expression SEMI_COLON
    (33) assignment -> . array_access EQ expression SEMI_COLON
    (35) function_call_stmt -> . function_call SEMI_COLON
    (43) return_stmt -> . RETURN expression SEMI_COLON
    (44) return_stmt -> . RETURN SEMI_COLON
    (45) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (46) if_stmt -> . IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement
    (47) for_stmt -> . FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END
    (48) while_stmt -> . WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement
    (49) do_while_stmt -> . DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR SEMI_COLON
    (50) block_stmt -> . BEGIN stmt_list END
    (4) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (5) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR
    (6) function -> . FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (7) function -> . FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON
    (34) array_access -> . ID LSQUAREBR expression RSQUAREBR
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (37) function_call -> . ID LPAREN RPAREN
    (38) function_call -> . PRINT LPAREN arg_list RPAREN
    (39) function_call -> . PRINT LPAREN RPAREN
    (40) function_call -> . LEN LPAREN expression RPAREN

    END             shift and go to state 182
    ID              shift and go to state 33
    RETURN          shift and go to state 49
    IF              shift and go to state 50
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    DO              shift and go to state 54
    BEGIN           shift and go to state 52
    FUNK            shift and go to state 4
    PRINT           shift and go to state 55
    LEN             shift and go to state 56

    statement                      shift and go to state 65
    var_declaration                shift and go to state 37
    assignment                     shift and go to state 38
    function_call_stmt             shift and go to state 39
    return_stmt                    shift and go to state 40
    if_stmt                        shift and go to state 41
    for_stmt                       shift and go to state 42
    while_stmt                     shift and go to state 43
    do_while_stmt                  shift and go to state 44
    block_stmt                     shift and go to state 45
    function                       shift and go to state 46
    array_access                   shift and go to state 47
    function_call                  shift and go to state 48

state 182

    (47) for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .

    RCURLYEBR       reduce using rule 47 (for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .)
    ID              reduce using rule 47 (for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .)
    RETURN          reduce using rule 47 (for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .)
    IF              reduce using rule 47 (for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .)
    FOR             reduce using rule 47 (for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .)
    WHILE           reduce using rule 47 (for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .)
    DO              reduce using rule 47 (for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .)
    BEGIN           reduce using rule 47 (for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .)
    FUNK            reduce using rule 47 (for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .)
    PRINT           reduce using rule 47 (for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .)
    LEN             reduce using rule 47 (for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .)
    END             reduce using rule 47 (for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .)
    ELSE            reduce using rule 47 (for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 29 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 29 resolved as shift
WARNING: shift/reduce conflict for IF in state 29 resolved as shift
WARNING: shift/reduce conflict for FOR in state 29 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 29 resolved as shift
WARNING: shift/reduce conflict for DO in state 29 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNK in state 29 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 29 resolved as shift
WARNING: shift/reduce conflict for LEN in state 29 resolved as shift
WARNING: shift/reduce conflict for ID in state 31 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 31 resolved as shift
WARNING: shift/reduce conflict for IF in state 31 resolved as shift
WARNING: shift/reduce conflict for FOR in state 31 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 31 resolved as shift
WARNING: shift/reduce conflict for DO in state 31 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 31 resolved as shift
WARNING: shift/reduce conflict for FUNK in state 31 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 31 resolved as shift
WARNING: shift/reduce conflict for LEN in state 31 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for DO in state 52 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 52 resolved as shift
WARNING: shift/reduce conflict for FUNK in state 52 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 52 resolved as shift
WARNING: shift/reduce conflict for LEN in state 52 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 171 resolved as shift
WARNING: shift/reduce conflict for ID in state 179 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 179 resolved as shift
WARNING: shift/reduce conflict for IF in state 179 resolved as shift
WARNING: shift/reduce conflict for FOR in state 179 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 179 resolved as shift
WARNING: shift/reduce conflict for DO in state 179 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 179 resolved as shift
WARNING: shift/reduce conflict for FUNK in state 179 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 179 resolved as shift
WARNING: shift/reduce conflict for LEN in state 179 resolved as shift
