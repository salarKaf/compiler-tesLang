
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQEQNEQleftLESS_THANGREATER_THANLTEQGTEQleftPLUSMINUSleftMULTIPLYDIVIDErightUMINUSUPLUSNOTrightQMARKCOLONAND ARROW AS BEGIN BOOL COLON COMMA DBL_COLON DIVIDE DO ELSE END EQ EQEQ FALSE FOR FUNK GREATER_THAN GTEQ ID IF INT LCURLYEBR LEN LESS_THAN LPAREN LSQUAREBR LTEQ MINUS MSTR MSTRING MULTIPLY NEQ NOT NULL NUMBER OR PLUS PRINT QMARK RCURLYEBR RETURN RPAREN RSQUAREBR SEMI_COLON STR STRING TO TRUE VECTOR WHILEprogram : function_listfunction_list : function_list function\n                    | functionfunction : FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR\n               | FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR\n               | FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON\n               | FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLONparam_list : param_list COMMA parameter\n                 | parameterparameter : ID AS typetype : INT\n           | STR  \n           | MSTR\n           | BOOL\n           | VECTOR\n           | NULLstmt_list : stmt_list statement\n                 | statement\n                 | emptystatement : var_declaration\n                 | assignment\n                 | function_call_stmt\n                 | return_stmt\n                 | if_stmt\n                 | for_stmt\n                 | while_stmt\n                 | do_while_stmt\n                 | block_stmt\n                 | functionvar_declaration : ID DBL_COLON type SEMI_COLON\n                       | ID DBL_COLON type EQ expression SEMI_COLONassignment : ID EQ expression SEMI_COLON\n                 | array_access EQ expression SEMI_COLONarray_access : ID LSQUAREBR expression RSQUAREBRfunction_call_stmt : function_call SEMI_COLONfunction_call : ID LPAREN arg_list RPAREN\n                    | ID LPAREN RPAREN\n                    | PRINT LPAREN arg_list RPAREN\n                    | PRINT LPAREN RPAREN\n                    | LEN LPAREN expression RPARENarg_list : arg_list COMMA expression\n               | expressionreturn_stmt : RETURN expression SEMI_COLON\n                  | RETURN SEMI_COLONif_stmt : IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement\n              | IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statementfor_stmt : FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list ENDwhile_stmt : WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statementdo_while_stmt : DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBRblock_stmt : BEGIN stmt_list ENDexpression : expression PLUS expression\n                 | expression MINUS expression\n                 | expression MULTIPLY expression\n                 | expression DIVIDE expression\n                 | expression EQEQ expression\n                 | expression NEQ expression\n                 | expression LESS_THAN expression\n                 | expression GREATER_THAN expression\n                 | expression LTEQ expression\n                 | expression GTEQ expression\n                 | expression AND expression\n                 | expression OR expressionexpression : NOT expression\n                 | MINUS expression %prec UMINUS\n                 | PLUS expression %prec UPLUSexpression : expression QMARK expression COLON expressionexpression : LPAREN expression RPARENexpression : LSQUAREBR arg_list RSQUAREBR\n                 | LSQUAREBR RSQUAREBRexpression : NUMBERexpression : STRING\n                 | MSTRINGexpression : TRUE\n                 | FALSEexpression : IDexpression : array_accessexpression : function_callempty :'
    
_lr_action_items = {'FUNK':([0,2,3,5,29,31,34,35,36,37,38,39,40,41,42,43,44,45,46,52,54,58,64,65,67,69,85,91,100,122,128,129,130,132,136,165,167,169,171,173,175,177,178,179,180,181,],[4,4,-3,-2,4,4,4,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,4,4,4,-5,-17,-35,-44,4,-4,-43,-50,-7,-6,-30,-32,-33,-31,4,4,-45,-48,4,-49,-46,4,4,-47,]),'$end':([1,2,3,5,64,91,128,129,],[0,-1,-3,-2,-5,-4,-7,-6,]),'ID':([4,7,14,29,31,34,35,36,37,38,39,40,41,42,43,44,45,46,49,52,54,57,58,59,61,62,63,64,65,66,67,69,70,71,72,73,74,84,85,88,89,91,100,101,102,103,104,105,106,107,108,109,110,111,112,113,120,122,123,128,129,130,131,132,135,136,153,160,164,165,167,168,169,171,173,175,177,178,179,180,181,],[6,8,8,33,33,33,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,80,33,33,80,33,80,80,80,80,-5,-17,80,-35,-44,80,80,80,80,80,121,33,80,80,-4,-43,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-50,80,-7,-6,-30,80,-32,80,-33,80,80,80,-31,33,80,33,-45,-48,33,-49,-46,33,33,-47,]),'LPAREN':([6,33,49,51,55,56,57,59,61,62,63,66,70,71,72,73,74,80,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,120,123,131,135,153,160,164,168,],[7,63,73,84,88,89,73,73,73,73,73,73,73,73,73,73,73,63,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'RPAREN':([7,9,11,16,17,18,19,20,21,22,24,63,75,76,77,78,79,80,81,82,88,96,97,98,114,115,116,117,119,125,126,127,133,134,137,138,139,140,141,142,143,144,145,146,147,148,150,151,156,157,159,166,172,],[10,13,-9,-10,-11,-12,-13,-14,-15,-16,-8,97,-70,-71,-72,-73,-74,-75,-76,-77,126,134,-37,-42,-65,-64,-63,150,-69,156,-39,157,-34,-36,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-67,-68,-38,-40,-41,-66,176,]),'AS':([8,],[12,]),'COMMA':([9,11,16,17,18,19,20,21,22,24,75,76,77,78,79,80,81,82,96,97,98,114,115,116,118,119,125,126,133,134,137,138,139,140,141,142,143,144,145,146,147,148,150,151,156,157,159,166,],[14,-9,-10,-11,-12,-13,-14,-15,-16,-8,-70,-71,-72,-73,-74,-75,-76,-77,135,-37,-42,-65,-64,-63,135,-69,135,-39,-34,-36,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-67,-68,-38,-40,-41,-66,]),'LESS_THAN':([10,13,68,75,76,77,78,79,80,81,82,90,92,94,95,97,98,99,114,115,116,117,119,126,127,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,156,157,158,159,162,166,170,172,],[15,23,107,-70,-71,-72,-73,-74,-75,-76,-77,107,107,107,107,-37,107,107,-65,-64,-63,107,-69,-39,107,-34,-36,-51,-52,-53,-54,107,107,-57,-58,-59,-60,107,107,107,-67,-68,107,107,-38,-40,107,107,107,-66,107,107,]),'INT':([12,15,23,60,],[17,17,17,17,]),'STR':([12,15,23,60,],[18,18,18,18,]),'MSTR':([12,15,23,60,],[19,19,19,19,]),'BOOL':([12,15,23,60,],[20,20,20,20,]),'VECTOR':([12,15,23,60,],[21,21,21,21,]),'NULL':([12,15,23,60,],[22,22,22,22,]),'GREATER_THAN':([17,18,19,20,21,22,25,26,68,75,76,77,78,79,80,81,82,90,92,94,95,97,98,99,114,115,116,117,119,126,127,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,156,157,158,159,162,166,170,172,],[-11,-12,-13,-14,-15,-16,27,28,108,-70,-71,-72,-73,-74,-75,-76,-77,108,108,108,108,-37,108,108,-65,-64,-63,108,-69,-39,108,-34,-36,-51,-52,-53,-54,108,108,-57,-58,-59,-60,108,108,108,-67,-68,108,108,-38,-40,108,108,108,-66,108,108,]),'SEMI_COLON':([17,18,19,20,21,22,48,49,68,75,76,77,78,79,80,81,82,90,92,93,94,97,99,114,115,116,119,126,133,134,137,138,139,140,141,142,143,144,145,146,147,148,150,151,156,157,158,166,],[-11,-12,-13,-14,-15,-16,67,69,100,-70,-71,-72,-73,-74,-75,-76,-77,128,129,130,132,-37,136,-65,-64,-63,-69,-39,-34,-36,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-67,-68,-38,-40,165,-66,]),'EQ':([17,18,19,20,21,22,33,47,93,121,133,],[-11,-12,-13,-14,-15,-16,61,66,131,153,-34,]),'LCURLYEBR':([27,28,],[29,31,]),'ARROW':([27,28,],[30,32,]),'RCURLYEBR':([29,31,34,35,36,37,38,39,40,41,42,43,44,45,46,58,64,65,67,69,91,100,122,128,129,130,132,136,165,171,173,177,178,181,],[-78,-78,64,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,91,-5,-17,-35,-44,-4,-43,-50,-7,-6,-30,-32,-33,-31,-45,-48,-49,-46,-47,]),'RETURN':([29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,52,54,58,64,65,67,69,85,91,100,122,128,129,130,132,136,165,167,169,171,173,175,177,178,179,180,181,],[49,57,49,59,49,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,49,49,49,-5,-17,-35,-44,49,-4,-43,-50,-7,-6,-30,-32,-33,-31,49,49,-45,-48,49,-49,-46,49,49,-47,]),'IF':([29,31,34,35,36,37,38,39,40,41,42,43,44,45,46,52,54,58,64,65,67,69,85,91,100,122,128,129,130,132,136,165,167,169,171,173,175,177,178,179,180,181,],[50,50,50,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,50,50,50,-5,-17,-35,-44,50,-4,-43,-50,-7,-6,-30,-32,-33,-31,50,50,-45,-48,50,-49,-46,50,50,-47,]),'FOR':([29,31,34,35,36,37,38,39,40,41,42,43,44,45,46,52,54,58,64,65,67,69,85,91,100,122,128,129,130,132,136,165,167,169,171,173,175,177,178,179,180,181,],[51,51,51,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,51,51,51,-5,-17,-35,-44,51,-4,-43,-50,-7,-6,-30,-32,-33,-31,51,51,-45,-48,51,-49,-46,51,51,-47,]),'WHILE':([29,31,34,35,36,37,38,39,40,41,42,43,44,45,46,52,54,58,64,65,67,69,85,87,91,100,122,128,129,130,132,136,165,167,169,171,173,175,177,178,179,180,181,],[53,53,53,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,53,53,53,-5,-17,-35,-44,53,124,-4,-43,-50,-7,-6,-30,-32,-33,-31,53,53,-45,-48,53,-49,-46,53,53,-47,]),'DO':([29,31,34,35,36,37,38,39,40,41,42,43,44,45,46,52,54,58,64,65,67,69,85,91,100,122,128,129,130,132,136,165,167,169,171,173,175,177,178,179,180,181,],[54,54,54,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,54,54,54,-5,-17,-35,-44,54,-4,-43,-50,-7,-6,-30,-32,-33,-31,54,54,-45,-48,54,-49,-46,54,54,-47,]),'BEGIN':([29,31,34,35,36,37,38,39,40,41,42,43,44,45,46,52,54,58,64,65,67,69,85,91,100,122,128,129,130,132,136,165,167,169,171,173,175,176,177,178,179,180,181,],[52,52,52,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,52,52,52,-5,-17,-35,-44,52,-4,-43,-50,-7,-6,-30,-32,-33,-31,52,52,-45,-48,52,179,-49,-46,52,52,-47,]),'PRINT':([29,31,34,35,36,37,38,39,40,41,42,43,44,45,46,49,52,54,57,58,59,61,62,63,64,65,66,67,69,70,71,72,73,74,85,88,89,91,100,101,102,103,104,105,106,107,108,109,110,111,112,113,120,122,123,128,129,130,131,132,135,136,153,160,164,165,167,168,169,171,173,175,177,178,179,180,181,],[55,55,55,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,55,55,55,55,55,55,55,55,55,-5,-17,55,-35,-44,55,55,55,55,55,55,55,55,-4,-43,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-50,55,-7,-6,-30,55,-32,55,-33,55,55,55,-31,55,55,55,-45,-48,55,-49,-46,55,55,-47,]),'LEN':([29,31,34,35,36,37,38,39,40,41,42,43,44,45,46,49,52,54,57,58,59,61,62,63,64,65,66,67,69,70,71,72,73,74,85,88,89,91,100,101,102,103,104,105,106,107,108,109,110,111,112,113,120,122,123,128,129,130,131,132,135,136,153,160,164,165,167,168,169,171,173,175,177,178,179,180,181,],[56,56,56,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,56,56,56,56,56,56,56,56,56,-5,-17,56,-35,-44,56,56,56,56,56,56,56,56,-4,-43,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-50,56,-7,-6,-30,56,-32,56,-33,56,56,56,-31,56,56,56,-45,-48,56,-49,-46,56,56,-47,]),'DBL_COLON':([33,],[60,]),'LSQUAREBR':([33,49,50,53,57,59,61,62,63,66,70,71,72,73,74,80,83,86,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,120,123,124,131,135,153,155,160,164,168,],[62,74,83,86,74,74,74,74,74,74,74,74,74,74,74,62,120,123,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,155,74,74,74,164,74,74,74,]),'END':([35,36,37,38,39,40,41,42,43,44,45,46,52,64,65,67,69,85,91,100,122,128,129,130,132,136,165,171,173,177,178,179,180,181,],[-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-78,-5,-17,-35,-44,122,-4,-43,-50,-7,-6,-30,-32,-33,-31,-45,-48,-49,-46,-78,181,-47,]),'ELSE':([37,38,39,40,41,42,43,44,45,46,64,67,69,91,100,122,128,129,130,132,136,165,171,173,177,178,181,],[-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-5,-35,-44,-4,-43,-50,-7,-6,-30,-32,-33,-31,175,-48,-49,-46,-47,]),'NOT':([49,57,59,61,62,63,66,70,71,72,73,74,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,120,123,131,135,153,160,164,168,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'MINUS':([49,57,59,61,62,63,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,88,89,90,92,94,95,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,123,126,127,131,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,157,158,159,160,162,164,166,168,170,172,],[71,71,71,71,71,71,71,102,71,71,71,71,71,-70,-71,-72,-73,-74,-75,-76,-77,71,71,102,102,102,102,-37,102,102,71,71,71,71,71,71,71,71,71,71,71,71,71,-65,-64,-63,102,-69,71,71,-39,102,71,-34,-36,71,-51,-52,-53,-54,102,102,102,102,102,102,102,102,102,-67,-68,102,71,102,-38,-40,102,102,71,102,71,-66,71,102,102,]),'PLUS':([49,57,59,61,62,63,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,88,89,90,92,94,95,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,123,126,127,131,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,157,158,159,160,162,164,166,168,170,172,],[70,70,70,70,70,70,70,101,70,70,70,70,70,-70,-71,-72,-73,-74,-75,-76,-77,70,70,101,101,101,101,-37,101,101,70,70,70,70,70,70,70,70,70,70,70,70,70,-65,-64,-63,101,-69,70,70,-39,101,70,-34,-36,70,-51,-52,-53,-54,101,101,101,101,101,101,101,101,101,-67,-68,101,70,101,-38,-40,101,101,70,101,70,-66,70,101,101,]),'NUMBER':([49,57,59,61,62,63,66,70,71,72,73,74,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,120,123,131,135,153,160,164,168,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'STRING':([49,57,59,61,62,63,66,70,71,72,73,74,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,120,123,131,135,153,160,164,168,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'MSTRING':([49,57,59,61,62,63,66,70,71,72,73,74,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,120,123,131,135,153,160,164,168,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'TRUE':([49,57,59,61,62,63,66,70,71,72,73,74,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,120,123,131,135,153,160,164,168,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'FALSE':([49,57,59,61,62,63,66,70,71,72,73,74,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,120,123,131,135,153,160,164,168,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'MULTIPLY':([68,75,76,77,78,79,80,81,82,90,92,94,95,97,98,99,114,115,116,117,119,126,127,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,156,157,158,159,162,166,170,172,],[103,-70,-71,-72,-73,-74,-75,-76,-77,103,103,103,103,-37,103,103,-65,-64,-63,103,-69,-39,103,-34,-36,103,103,-53,-54,103,103,103,103,103,103,103,103,103,-67,-68,103,103,-38,-40,103,103,103,-66,103,103,]),'DIVIDE':([68,75,76,77,78,79,80,81,82,90,92,94,95,97,98,99,114,115,116,117,119,126,127,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,156,157,158,159,162,166,170,172,],[104,-70,-71,-72,-73,-74,-75,-76,-77,104,104,104,104,-37,104,104,-65,-64,-63,104,-69,-39,104,-34,-36,104,104,-53,-54,104,104,104,104,104,104,104,104,104,-67,-68,104,104,-38,-40,104,104,104,-66,104,104,]),'EQEQ':([68,75,76,77,78,79,80,81,82,90,92,94,95,97,98,99,114,115,116,117,119,126,127,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,156,157,158,159,162,166,170,172,],[105,-70,-71,-72,-73,-74,-75,-76,-77,105,105,105,105,-37,105,105,-65,-64,-63,105,-69,-39,105,-34,-36,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,105,105,105,-67,-68,105,105,-38,-40,105,105,105,-66,105,105,]),'NEQ':([68,75,76,77,78,79,80,81,82,90,92,94,95,97,98,99,114,115,116,117,119,126,127,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,156,157,158,159,162,166,170,172,],[106,-70,-71,-72,-73,-74,-75,-76,-77,106,106,106,106,-37,106,106,-65,-64,-63,106,-69,-39,106,-34,-36,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,106,106,106,-67,-68,106,106,-38,-40,106,106,106,-66,106,106,]),'LTEQ':([68,75,76,77,78,79,80,81,82,90,92,94,95,97,98,99,114,115,116,117,119,126,127,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,156,157,158,159,162,166,170,172,],[109,-70,-71,-72,-73,-74,-75,-76,-77,109,109,109,109,-37,109,109,-65,-64,-63,109,-69,-39,109,-34,-36,-51,-52,-53,-54,109,109,-57,-58,-59,-60,109,109,109,-67,-68,109,109,-38,-40,109,109,109,-66,109,109,]),'GTEQ':([68,75,76,77,78,79,80,81,82,90,92,94,95,97,98,99,114,115,116,117,119,126,127,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,156,157,158,159,162,166,170,172,],[110,-70,-71,-72,-73,-74,-75,-76,-77,110,110,110,110,-37,110,110,-65,-64,-63,110,-69,-39,110,-34,-36,-51,-52,-53,-54,110,110,-57,-58,-59,-60,110,110,110,-67,-68,110,110,-38,-40,110,110,110,-66,110,110,]),'AND':([68,75,76,77,78,79,80,81,82,90,92,94,95,97,98,99,114,115,116,117,119,126,127,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,156,157,158,159,162,166,170,172,],[111,-70,-71,-72,-73,-74,-75,-76,-77,111,111,111,111,-37,111,111,-65,-64,-63,111,-69,-39,111,-34,-36,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,111,111,-67,-68,111,111,-38,-40,111,111,111,-66,111,111,]),'OR':([68,75,76,77,78,79,80,81,82,90,92,94,95,97,98,99,114,115,116,117,119,126,127,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,156,157,158,159,162,166,170,172,],[112,-70,-71,-72,-73,-74,-75,-76,-77,112,112,112,112,-37,112,112,-65,-64,-63,112,-69,-39,112,-34,-36,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,112,-67,-68,112,112,-38,-40,112,112,112,-66,112,112,]),'QMARK':([68,75,76,77,78,79,80,81,82,90,92,94,95,97,98,99,114,115,116,117,119,126,127,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,156,157,158,159,162,166,170,172,],[113,-70,-71,-72,-73,-74,-75,-76,-77,113,113,113,113,-37,113,113,113,113,113,113,-69,-39,113,-34,-36,113,113,113,113,113,113,113,113,113,113,113,113,113,-67,-68,113,113,-38,-40,113,113,113,113,113,113,]),'RSQUAREBR':([74,75,76,77,78,79,80,81,82,95,97,98,114,115,116,118,119,126,133,134,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,154,156,157,159,161,163,166,170,174,],[119,-70,-71,-72,-73,-74,-75,-76,-77,133,-37,-42,-65,-64,-63,151,-69,-39,-34,-36,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-67,-68,161,163,-38,-40,-41,167,169,-66,174,177,]),'COLON':([75,76,77,78,79,80,81,82,97,114,115,116,119,126,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,156,157,166,],[-70,-71,-72,-73,-74,-75,-76,-77,-37,-65,-64,-63,-69,-39,-34,-36,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,160,-67,-68,-38,-40,-66,]),'TO':([75,76,77,78,79,80,81,82,97,114,115,116,119,126,133,134,137,138,139,140,141,142,143,144,145,146,147,148,150,151,156,157,162,166,],[-70,-71,-72,-73,-74,-75,-76,-77,-37,-65,-64,-63,-69,-39,-34,-36,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-67,-68,-38,-40,168,-66,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function_list':([0,],[2,]),'function':([0,2,29,31,34,52,54,58,85,167,169,175,179,180,],[3,5,46,46,46,46,46,46,46,46,46,46,46,46,]),'param_list':([7,],[9,]),'parameter':([7,14,],[11,24,]),'type':([12,15,23,60,],[16,25,26,93,]),'stmt_list':([29,31,52,179,],[34,58,85,180,]),'statement':([29,31,34,52,54,58,85,167,169,175,179,180,],[35,35,65,35,87,65,65,171,173,178,35,65,]),'empty':([29,31,52,179,],[36,36,36,36,]),'var_declaration':([29,31,34,52,54,58,85,167,169,175,179,180,],[37,37,37,37,37,37,37,37,37,37,37,37,]),'assignment':([29,31,34,52,54,58,85,167,169,175,179,180,],[38,38,38,38,38,38,38,38,38,38,38,38,]),'function_call_stmt':([29,31,34,52,54,58,85,167,169,175,179,180,],[39,39,39,39,39,39,39,39,39,39,39,39,]),'return_stmt':([29,31,34,52,54,58,85,167,169,175,179,180,],[40,40,40,40,40,40,40,40,40,40,40,40,]),'if_stmt':([29,31,34,52,54,58,85,167,169,175,179,180,],[41,41,41,41,41,41,41,41,41,41,41,41,]),'for_stmt':([29,31,34,52,54,58,85,167,169,175,179,180,],[42,42,42,42,42,42,42,42,42,42,42,42,]),'while_stmt':([29,31,34,52,54,58,85,167,169,175,179,180,],[43,43,43,43,43,43,43,43,43,43,43,43,]),'do_while_stmt':([29,31,34,52,54,58,85,167,169,175,179,180,],[44,44,44,44,44,44,44,44,44,44,44,44,]),'block_stmt':([29,31,34,52,54,58,85,167,169,175,179,180,],[45,45,45,45,45,45,45,45,45,45,45,45,]),'array_access':([29,31,34,49,52,54,57,58,59,61,62,63,66,70,71,72,73,74,85,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,120,123,131,135,153,160,164,167,168,169,175,179,180,],[47,47,47,81,47,47,81,47,81,81,81,81,81,81,81,81,81,81,47,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,47,81,47,47,47,47,]),'function_call':([29,31,34,49,52,54,57,58,59,61,62,63,66,70,71,72,73,74,85,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,120,123,131,135,153,160,164,167,168,169,175,179,180,],[48,48,48,82,48,48,82,48,82,82,82,82,82,82,82,82,82,82,48,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,48,82,48,48,48,48,]),'expression':([49,57,59,61,62,63,66,70,71,72,73,74,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,120,123,131,135,153,160,164,168,],[68,90,92,94,95,98,99,114,115,116,117,98,98,127,137,138,139,140,141,142,143,144,145,146,147,148,149,152,154,158,159,162,166,170,172,]),'arg_list':([63,74,88,],[96,118,125,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function_list','program',1,'p_program','parser.py',51),
  ('function_list -> function_list function','function_list',2,'p_function_list','parser.py',55),
  ('function_list -> function','function_list',1,'p_function_list','parser.py',56),
  ('function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR','function',11,'p_function','parser.py',63),
  ('function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN LCURLYEBR stmt_list RCURLYEBR','function',10,'p_function','parser.py',64),
  ('function -> FUNK ID LPAREN param_list RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON','function',12,'p_function','parser.py',65),
  ('function -> FUNK ID LPAREN RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expression SEMI_COLON','function',11,'p_function','parser.py',66),
  ('param_list -> param_list COMMA parameter','param_list',3,'p_param_list','parser.py',86),
  ('param_list -> parameter','param_list',1,'p_param_list','parser.py',87),
  ('parameter -> ID AS type','parameter',3,'p_parameter','parser.py',94),
  ('type -> INT','type',1,'p_type','parser.py',98),
  ('type -> STR','type',1,'p_type','parser.py',99),
  ('type -> MSTR','type',1,'p_type','parser.py',100),
  ('type -> BOOL','type',1,'p_type','parser.py',101),
  ('type -> VECTOR','type',1,'p_type','parser.py',102),
  ('type -> NULL','type',1,'p_type','parser.py',103),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',107),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',108),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser.py',109),
  ('statement -> var_declaration','statement',1,'p_statement','parser.py',124),
  ('statement -> assignment','statement',1,'p_statement','parser.py',125),
  ('statement -> function_call_stmt','statement',1,'p_statement','parser.py',126),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',127),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',128),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',129),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',130),
  ('statement -> do_while_stmt','statement',1,'p_statement','parser.py',131),
  ('statement -> block_stmt','statement',1,'p_statement','parser.py',132),
  ('statement -> function','statement',1,'p_statement','parser.py',133),
  ('var_declaration -> ID DBL_COLON type SEMI_COLON','var_declaration',4,'p_var_declaration','parser.py',140),
  ('var_declaration -> ID DBL_COLON type EQ expression SEMI_COLON','var_declaration',6,'p_var_declaration','parser.py',141),
  ('assignment -> ID EQ expression SEMI_COLON','assignment',4,'p_assignment','parser.py',150),
  ('assignment -> array_access EQ expression SEMI_COLON','assignment',4,'p_assignment','parser.py',151),
  ('array_access -> ID LSQUAREBR expression RSQUAREBR','array_access',4,'p_array_access','parser.py',155),
  ('function_call_stmt -> function_call SEMI_COLON','function_call_stmt',2,'p_function_call_stmt','parser.py',159),
  ('function_call -> ID LPAREN arg_list RPAREN','function_call',4,'p_function_call','parser.py',163),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','parser.py',164),
  ('function_call -> PRINT LPAREN arg_list RPAREN','function_call',4,'p_function_call','parser.py',165),
  ('function_call -> PRINT LPAREN RPAREN','function_call',3,'p_function_call','parser.py',166),
  ('function_call -> LEN LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',167),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',177),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',178),
  ('return_stmt -> RETURN expression SEMI_COLON','return_stmt',3,'p_return_stmt','parser.py',185),
  ('return_stmt -> RETURN SEMI_COLON','return_stmt',2,'p_return_stmt','parser.py',186),
  ('if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement','if_stmt',7,'p_if_stmt','parser.py',203),
  ('if_stmt -> IF LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement ELSE statement','if_stmt',9,'p_if_stmt','parser.py',204),
  ('for_stmt -> FOR LPAREN ID EQ expression TO expression RPAREN BEGIN stmt_list END','for_stmt',11,'p_for_stmt','parser.py',211),
  ('while_stmt -> WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR statement','while_stmt',7,'p_while_stmt','parser.py',215),
  ('do_while_stmt -> DO statement WHILE LSQUAREBR LSQUAREBR expression RSQUAREBR RSQUAREBR','do_while_stmt',8,'p_do_while_stmt','parser.py',219),
  ('block_stmt -> BEGIN stmt_list END','block_stmt',3,'p_block_stmt','parser.py',223),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',227),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',228),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',229),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',230),
  ('expression -> expression EQEQ expression','expression',3,'p_expression_binop','parser.py',231),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',232),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binop','parser.py',233),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binop','parser.py',234),
  ('expression -> expression LTEQ expression','expression',3,'p_expression_binop','parser.py',235),
  ('expression -> expression GTEQ expression','expression',3,'p_expression_binop','parser.py',236),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',237),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',238),
  ('expression -> NOT expression','expression',2,'p_expression_unary','parser.py',242),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','parser.py',243),
  ('expression -> PLUS expression','expression',2,'p_expression_unary','parser.py',244),
  ('expression -> expression QMARK expression COLON expression','expression',5,'p_expression_ternary','parser.py',248),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',252),
  ('expression -> LSQUAREBR arg_list RSQUAREBR','expression',3,'p_expression_array_literal','parser.py',256),
  ('expression -> LSQUAREBR RSQUAREBR','expression',2,'p_expression_array_literal','parser.py',257),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',264),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',268),
  ('expression -> MSTRING','expression',1,'p_expression_string','parser.py',269),
  ('expression -> TRUE','expression',1,'p_expression_boolean','parser.py',273),
  ('expression -> FALSE','expression',1,'p_expression_boolean','parser.py',274),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',278),
  ('expression -> array_access','expression',1,'p_expression_array_access','parser.py',282),
  ('expression -> function_call','expression',1,'p_expression_function_call','parser.py',286),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',290),
]
